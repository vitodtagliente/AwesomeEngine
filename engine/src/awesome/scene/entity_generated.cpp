// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "entity.h"

const type_meta_t& Type<Entity>::meta()
{
    static type_meta_t s_meta {
    };
    return s_meta;
}
const char* const Type<Entity>::name() { return "Entity"; }

const type_properties_t& Type<Entity>::properties()
{
    static type_properties_t s_properties {
        { "name", Property{ offsetof(Entity, name), type_meta_t { }, "name", NativeType{ "std::string", {  }, NativeType::DecoratorType::D_raw, sizeof(std::string), NativeType::Type::T_string } } },
        { "persistent", Property{ offsetof(Entity, persistent), type_meta_t { }, "persistent", NativeType{ "bool", {  }, NativeType::DecoratorType::D_raw, sizeof(bool), NativeType::Type::T_bool } } },
        { "replicate", Property{ offsetof(Entity, replicate), type_meta_t { }, "replicate", NativeType{ "bool", {  }, NativeType::DecoratorType::D_raw, sizeof(bool), NativeType::Type::T_bool } } },
        { "tag", Property{ offsetof(Entity, tag), type_meta_t { }, "tag", NativeType{ "std::string", {  }, NativeType::DecoratorType::D_raw, sizeof(std::string), NativeType::Type::T_string } } },
        { "transform", Property{ offsetof(Entity, transform), type_meta_t { }, "transform", NativeType{ "math::transform", {  }, NativeType::DecoratorType::D_raw, sizeof(math::transform), NativeType::Type::T_unknown } } },
        { "transient", Property{ offsetof(Entity, transient), type_meta_t { }, "transient", NativeType{ "bool", {  }, NativeType::DecoratorType::D_raw, sizeof(bool), NativeType::Type::T_bool } } },
        { "m_children", Property{ offsetof(Entity, m_children), type_meta_t { }, "m_children", NativeType{ "std::vector<std::unique_ptr<Entity>>", { 
            NativeType{ "std::unique_ptr<Entity>", { 
                NativeType{ "Entity", {  }, NativeType::DecoratorType::D_raw, sizeof(Entity), NativeType::Type::T_type },
            }, NativeType::DecoratorType::D_raw, sizeof(std::unique_ptr<Entity>), NativeType::Type::T_template },
        }, NativeType::DecoratorType::D_raw, sizeof(std::vector<std::unique_ptr<Entity>>), NativeType::Type::T_template } } },
        { "m_components", Property{ offsetof(Entity, m_components), type_meta_t { }, "m_components", NativeType{ "std::vector<std::unique_ptr<Component>>", { 
            NativeType{ "std::unique_ptr<Component>", { 
                NativeType{ "Component", {  }, NativeType::DecoratorType::D_raw, sizeof(Component), NativeType::Type::T_type },
            }, NativeType::DecoratorType::D_raw, sizeof(std::unique_ptr<Component>), NativeType::Type::T_template },
        }, NativeType::DecoratorType::D_raw, sizeof(std::vector<std::unique_ptr<Component>>), NativeType::Type::T_template } } },
        { "m_id", Property{ offsetof(Entity, m_id), type_meta_t { }, "m_id", NativeType{ "uuid", {  }, NativeType::DecoratorType::D_raw, sizeof(uuid), NativeType::Type::T_unknown } } },
    };
    return s_properties;
}

const type_meta_t& Entity::type_meta() const { return Type<Entity>::meta(); }
const char* const Entity::type_name() const { return Type<Entity>::name(); }
const type_properties_t& Entity::type_properties() const { return Type<Entity>::properties(); }


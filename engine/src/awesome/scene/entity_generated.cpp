// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "entity.h"
#pragma warning(disable: 4100)

IType* const reflect::Type<Entity>::instantiate()
{
    return dynamic_cast<IType*>(new Entity());
}

const reflect::meta_t& reflect::Type<Entity>::meta()
{
    static reflect::meta_t s_meta {
    };
    return s_meta;
}
const char* const reflect::Type<Entity>::name() { return "Entity"; }

const reflect::properties_t& Type<Entity>::properties()
{
    static reflect::properties_t s_properties {
        { "name", reflect::Property{ offsetof(Entity, name), reflect::meta_t { }, "name", reflect::PropertyType{ "std::string", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(std::string), reflect::PropertyType::Type::T_string } } },
        { "persistent", reflect::Property{ offsetof(Entity, persistent), reflect::meta_t { }, "persistent", reflect::PropertyType{ "bool", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(bool), reflect::PropertyType::Type::T_bool } } },
        { "replicate", reflect::Property{ offsetof(Entity, replicate), reflect::meta_t { }, "replicate", reflect::PropertyType{ "bool", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(bool), reflect::PropertyType::Type::T_bool } } },
        { "tag", reflect::Property{ offsetof(Entity, tag), reflect::meta_t { }, "tag", reflect::PropertyType{ "std::string", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(std::string), reflect::PropertyType::Type::T_string } } },
        { "transform", reflect::Property{ offsetof(Entity, transform), reflect::meta_t { }, "transform", reflect::PropertyType{ "math::transform", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(math::transform), reflect::PropertyType::Type::T_native } } },
        { "transient", reflect::Property{ offsetof(Entity, transient), reflect::meta_t { }, "transient", reflect::PropertyType{ "bool", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(bool), reflect::PropertyType::Type::T_bool } } },
        { "m_children", reflect::Property{ offsetof(Entity, m_children), reflect::meta_t { }, "m_children", reflect::PropertyType{ "std::vector<std::unique_ptr<Entity>>", { 
            reflect::PropertyType{ "std::unique_ptr<Entity>", { 
                reflect::PropertyType{ "Entity", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(Entity), reflect::PropertyType::Type::T_type },
            }, reflect::PropertyType::DecoratorType::D_raw, sizeof(std::unique_ptr<Entity>), reflect::PropertyType::Type::T_template },
        }, reflect::PropertyType::DecoratorType::D_raw, sizeof(std::vector<std::unique_ptr<Entity>>), reflect::PropertyType::Type::T_template } } },
        { "m_components", reflect::Property{ offsetof(Entity, m_components), reflect::meta_t { }, "m_components", reflect::PropertyType{ "std::vector<std::unique_ptr<Component>>", { 
            reflect::PropertyType{ "std::unique_ptr<Component>", { 
                reflect::PropertyType{ "Component", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(Component), reflect::PropertyType::Type::T_type },
            }, reflect::PropertyType::DecoratorType::D_raw, sizeof(std::unique_ptr<Component>), reflect::PropertyType::Type::T_template },
        }, reflect::PropertyType::DecoratorType::D_raw, sizeof(std::vector<std::unique_ptr<Component>>), reflect::PropertyType::Type::T_template } } },
    };
    return s_properties;
}

std::size_t reflect::Type<Entity>::size()
{
    return sizeof(Entity);
}

void reflect::Type<Entity>::from_string(const std::string& str, Entity& type)
{
    reflect::encoding::ByteBuffer buffer;
    std::transform(
        std::begin(str),
        std::end(str),
        std::back_inserter(buffer),
        [](const char c)
        {
            return std::byte(c);
        }
    );
    
    reflect::encoding::InputByteStream stream(buffer);
    std::string _name;
    stream >> _name;
    if (_name != name()) return;
    
    stream >> type.name;
    stream >> type.persistent;
    stream >> type.replicate;
    stream >> type.tag;
    {
        std::string pack;
        stream >> pack;
        reflect::Type<math::transform>::from_string(pack, type.transform);
    }
    stream >> type.transient;
    {
        type.m_children.clear();
        std::size_t size;
        stream >> size;
        for (int i = 0; i < size; ++i)
        {
            std::unique_ptr<Entity> element;
            {
                bool valid = false;
                stream >> valid;
                if (valid)
                {
                    reflect::encoding::InputByteStream temp_stream(buffer, stream.getIndex());
                    std::size_t temp_element_size;
                    temp_stream >> temp_element_size;
                    std::string type_id;
                    temp_stream >> type_id;
                    if (type_id == Type<Entity>::name())
                    {
                        element = std::make_unique<Entity>();
                    }
                    else
                    {
                        element = std::unique_ptr<Entity>(TypeFactory::instantiate<Entity>(type_id));
                    }
                    {
                        std::string pack;
                        stream >> pack;
                        element->from_string(pack);
                    }
                }
            }
            type.m_children.push_back(std::move(element));
        }
    }
    {
        type.m_components.clear();
        std::size_t size;
        stream >> size;
        for (int i = 0; i < size; ++i)
        {
            std::unique_ptr<Component> element;
            {
                bool valid = false;
                stream >> valid;
                if (valid)
                {
                    reflect::encoding::InputByteStream temp_stream(buffer, stream.getIndex());
                    std::size_t temp_element_size;
                    temp_stream >> temp_element_size;
                    std::string type_id;
                    temp_stream >> type_id;
                    if (type_id == Type<Component>::name())
                    {
                        element = std::make_unique<Component>();
                    }
                    else
                    {
                        element = std::unique_ptr<Component>(TypeFactory::instantiate<Component>(type_id));
                    }
                    {
                        std::string pack;
                        stream >> pack;
                        element->from_string(pack);
                    }
                }
            }
            type.m_components.push_back(std::move(element));
        }
    }
}

std::string reflect::Type<Entity>::to_string(const Entity& type)
{
    reflect::encoding::ByteBuffer buffer;
    reflect::encoding::OutputByteStream stream(buffer);
    stream << name();
    
    stream << type.name;
    stream << type.persistent;
    stream << type.replicate;
    stream << type.tag;
    stream << reflect::Type<math::transform>::to_string(type.transform);
    stream << type.transient;
    {
        stream << type.m_children.size();
        for (const auto& element : type.m_children)
        {
            stream << (element ? true : false); 
            if(element) stream << static_cast<std::string>(*element);
        }
    }
    {
        stream << type.m_components.size();
        for (const auto& element : type.m_components)
        {
            stream << (element ? true : false); 
            if(element) stream << static_cast<std::string>(*element);
        }
    }
    
    return std::string(reinterpret_cast<const char*>(&stream.getBuffer()[0]), stream.getBuffer().size());
}

void reflect::Type<Entity>::from_json(const std::string& json, Entity& type)
{
    std::string src{ reflect::encoding::json::Deserializer::trim(json, reflect::encoding::json::Deserializer::space) };
    
    size_t index = 0;
    std::string key;
    while ((index = reflect::encoding::json::Deserializer::next_key(src, key)) != std::string::npos)
    {
        src = src.substr(index + 2);
        src = reflect::encoding::json::Deserializer::ltrim(src, reflect::encoding::json::Deserializer::space);
        std::string value;
        index = reflect::encoding::json::Deserializer::next_value(src, value);
        if (index != std::string::npos)
        {
            if (key == "name") reflect::encoding::json::Deserializer::parse(value, type.name);
            if (key == "persistent") reflect::encoding::json::Deserializer::parse(value, type.persistent);
            if (key == "replicate") reflect::encoding::json::Deserializer::parse(value, type.replicate);
            if (key == "tag") reflect::encoding::json::Deserializer::parse(value, type.tag);
            if (key == "transform") reflect::Type<math::transform>::from_json(value, type.transform);
            if (key == "transient") reflect::encoding::json::Deserializer::parse(value, type.transient);
            if (key == "m_children") reflect::encoding::json::Deserializer::parse(value, type.m_children);
            if (key == "m_components") reflect::encoding::json::Deserializer::parse(value, type.m_components);
            src = src.substr(index + 1);
        }
        else break;
    };
}

std::string reflect::Type<Entity>::to_json(const Entity& type, const std::string& offset)
{
    std::stringstream stream;
    stream << "{" << std::endl;
    stream << offset << "    " << "\"type_id\": " << "\"Entity\"" << "," << std::endl;
    stream << offset << "    " << "\"name\": " << reflect::encoding::json::Serializer::to_string(type.name) << "," << std::endl;
    stream << offset << "    " << "\"persistent\": " << reflect::encoding::json::Serializer::to_string(type.persistent) << "," << std::endl;
    stream << offset << "    " << "\"replicate\": " << reflect::encoding::json::Serializer::to_string(type.replicate) << "," << std::endl;
    stream << offset << "    " << "\"tag\": " << reflect::encoding::json::Serializer::to_string(type.tag) << "," << std::endl;
    stream << offset << "    " << "\"transform\": " << reflect::Type<math::transform>::to_json(type.transform, offset + "    ") << "," << std::endl;
    stream << offset << "    " << "\"transient\": " << reflect::encoding::json::Serializer::to_string(type.transient) << "," << std::endl;
    stream << offset << "    " << "\"m_children\": " << reflect::encoding::json::Serializer::to_string(type.m_children) << "," << std::endl;
    stream << offset << "    " << "\"m_components\": " << reflect::encoding::json::Serializer::to_string(type.m_components) << "," << std::endl;
    stream << offset << "}";
    return stream.str();
}

const reflect::meta_t& Entity::type_meta() const { return reflect::Type<Entity>::meta(); }
const char* const Entity::type_name() const { return reflect::Type<Entity>::name(); }
const reflect::properties_t& Entity::type_properties() const { return reflect::Type<Entity>::properties(); }
Entity::operator std::string() const { return reflect::Type<Entity>::to_string(*this); }
void Entity::from_string(const std::string& str)
{
    reflect::Type<Entity>::from_string(str, *this);
    type_initialize();
}
void Entity::from_json(const std::string& json)
{
    reflect::Type<Entity>::from_json(json, *this);
    type_initialize();
}
std::string Entity::to_json(const std::string& offset) const { return reflect::Type<Entity>::to_json(*this, offset); }
// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtreflect/runtime.h>

template <>
struct EnumType<enum class ApplicationMode>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct ApplicationModeEnum : RegisteredInEnumFactory<enum class ApplicationMode>
{
    static bool registered() { return value; };
};

template <>
struct EnumType<enum class FpsMode>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct FpsModeEnum : RegisteredInEnumFactory<enum class FpsMode>
{
    static bool registered() { return value; };
};

struct ApplicationEditorSettingsType : RegisteredInTypeFactory<ApplicationEditorSettingsType>
{
    ApplicationEditorSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct ApplicationDebugSettingsType : RegisteredInTypeFactory<ApplicationDebugSettingsType>
{
    ApplicationDebugSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct ApplicationNetworkSettingsType : RegisteredInTypeFactory<ApplicationNetworkSettingsType>
{
    ApplicationNetworkSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct ApplicationPlayerSettingsType : RegisteredInTypeFactory<ApplicationPlayerSettingsType>
{
    ApplicationPlayerSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct ApplicationSceneSettingsType : RegisteredInTypeFactory<ApplicationSceneSettingsType>
{
    ApplicationSceneSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct ApplicationSettingsType : RegisteredInTypeFactory<ApplicationSettingsType>
{
    ApplicationSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};


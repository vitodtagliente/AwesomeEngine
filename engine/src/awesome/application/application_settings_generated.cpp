// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "application_settings.h"

const char* EnumType<ApplicationMode>::name() { return "ApplicationMode"; }
const std::map<const char*, int>  EnumType<ApplicationMode>::values()
{
    static std::map<const char*, int> s_values{
        { "Editor", static_cast<int>(ApplicationMode::Editor) }, 
        { "Server", static_cast<int>(ApplicationMode::Server) }, 
        { "Standalone", static_cast<int>(ApplicationMode::Standalone) }, 
    };
    return s_values;
}

const char* EnumType<FpsMode>::name() { return "FpsMode"; }
const std::map<const char*, int>  EnumType<FpsMode>::values()
{
    static std::map<const char*, int> s_values{
        { "Fps30", static_cast<int>(FpsMode::Fps30) }, 
        { "Fps60", static_cast<int>(FpsMode::Fps60) }, 
        { "Fps90", static_cast<int>(FpsMode::Fps90) }, 
        { "Unlimited", static_cast<int>(FpsMode::Unlimited) }, 
    };
    return s_values;
}

const meta_t& ApplicationSettings::getTypeMeta() const { return ApplicationSettingsType::meta(); }
const char* ApplicationSettings::getTypeName() const { return ApplicationSettingsType::name(); }
const properties_t ApplicationSettings::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("fps", Property("fps", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, fps), {
    })));
    properties.insert(std::make_pair<std::string, Property>("mode", Property("mode", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, mode), {
    })));
    properties.insert(std::make_pair<std::string, Property>("workspacePath", Property("workspacePath", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, workspacePath), {
    })));
    properties.insert(std::make_pair<std::string, Property>("editorScene", Property("editorScene", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, editorScene), {
    })));
    properties.insert(std::make_pair<std::string, Property>("serverScene", Property("serverScene", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, serverScene), {
    })));
    properties.insert(std::make_pair<std::string, Property>("standaloneScene", Property("standaloneScene", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, standaloneScene), {
    })));
    properties.insert(std::make_pair<std::string, Property>("serverIp", Property("serverIp", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, serverIp), {
    })));
    properties.insert(std::make_pair<std::string, Property>("serverPort", Property("serverPort", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, serverPort), {
    })));
    properties.insert(std::make_pair<std::string, Property>("maxServerConnections", Property("maxServerConnections", NativeType::NT_int, "int", sizeof(int), origin + offsetof(ApplicationSettings, maxServerConnections), {
    })));
    return properties;
}
std::size_t ApplicationSettings::getTypeSize() const { return sizeof(ApplicationSettings); }

ApplicationSettingsType::ApplicationSettingsType()
{
    TypeFactoryRegister::load(ApplicationSettingsType::name(), []() -> const meta_t& { return ApplicationSettingsType::meta(); }, []() -> IType* { return ApplicationSettingsType::instantiate(); });
}

ApplicationSettings* const ApplicationSettingsType::instantiate()
{
    return new ApplicationSettings();
}

const meta_t& ApplicationSettingsType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* ApplicationSettingsType::name() { return "ApplicationSettings"; }

ApplicationSettingsType __applicationsettings_type;


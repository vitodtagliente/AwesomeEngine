// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "application_settings.h"

const char* EnumType<ApplicationMode>::name() { return "ApplicationMode"; }
const enum_values_t& EnumType<ApplicationMode>::values()
{
    static enum_values_t s_values{
        { "Editor", static_cast<int>(ApplicationMode::Editor) }, 
        { "Server", static_cast<int>(ApplicationMode::Server) }, 
        { "Standalone", static_cast<int>(ApplicationMode::Standalone) }, 
    };
    return s_values;
}

const char* EnumType<FpsMode>::name() { return "FpsMode"; }
const enum_values_t& EnumType<FpsMode>::values()
{
    static enum_values_t s_values{
        { "Fps30", static_cast<int>(FpsMode::Fps30) }, 
        { "Fps60", static_cast<int>(FpsMode::Fps60) }, 
        { "Fps90", static_cast<int>(FpsMode::Fps90) }, 
        { "Unlimited", static_cast<int>(FpsMode::Unlimited) }, 
    };
    return s_values;
}

const meta_t& ApplicationSettings::getTypeMeta() const { return ApplicationSettingsType::type().meta; }
const std::string& ApplicationSettings::getTypeName() const { return ApplicationSettingsType::type().name; }
const properties_t ApplicationSettings::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("fps", Property("fps", Property::TypeDescriptor("FpsMode", Property::Type::T_custom_enum, Property::DecoratorType::D_normalized, {}), sizeof(FpsMode), origin + offsetof(ApplicationSettings, fps), {
    })));
    properties.insert(std::make_pair<std::string, Property>("mode", Property("mode", Property::TypeDescriptor("ApplicationMode", Property::Type::T_custom_enum, Property::DecoratorType::D_normalized, {}), sizeof(ApplicationMode), origin + offsetof(ApplicationSettings, mode), {
    })));
    properties.insert(std::make_pair<std::string, Property>("workspacePath", Property("workspacePath", Property::TypeDescriptor("std::filesystem::path", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(std::filesystem::path), origin + offsetof(ApplicationSettings, workspacePath), {
    })));
    properties.insert(std::make_pair<std::string, Property>("editorScene", Property("editorScene", Property::TypeDescriptor("SceneAssetPtr", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(SceneAssetPtr), origin + offsetof(ApplicationSettings, editorScene), {
    })));
    properties.insert(std::make_pair<std::string, Property>("serverScene", Property("serverScene", Property::TypeDescriptor("SceneAssetPtr", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(SceneAssetPtr), origin + offsetof(ApplicationSettings, serverScene), {
    })));
    properties.insert(std::make_pair<std::string, Property>("standaloneScene", Property("standaloneScene", Property::TypeDescriptor("SceneAssetPtr", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(SceneAssetPtr), origin + offsetof(ApplicationSettings, standaloneScene), {
    })));
    properties.insert(std::make_pair<std::string, Property>("serverIp", Property("serverIp", Property::TypeDescriptor("std::string", Property::Type::T_container_string, Property::DecoratorType::D_normalized, {}), sizeof(std::string), origin + offsetof(ApplicationSettings, serverIp), {
    })));
    properties.insert(std::make_pair<std::string, Property>("serverPort", Property("serverPort", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(ApplicationSettings, serverPort), {
    })));
    properties.insert(std::make_pair<std::string, Property>("maxServerConnections", Property("maxServerConnections", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(ApplicationSettings, maxServerConnections), {
    })));
    properties.insert(std::make_pair<std::string, Property>("quadspaceBounds", Property("quadspaceBounds", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(ApplicationSettings, quadspaceBounds), {
    })));
    properties.insert(std::make_pair<std::string, Property>("wireframesEnabled", Property("wireframesEnabled", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(ApplicationSettings, wireframesEnabled), {
    })));
    properties.insert(std::make_pair<std::string, Property>("wireframesColor", Property("wireframesColor", Property::TypeDescriptor("graphics::Color", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(graphics::Color), origin + offsetof(ApplicationSettings, wireframesColor), {
    })));
    properties.insert(std::make_pair<std::string, Property>("playerControllerType", Property("playerControllerType", Property::TypeDescriptor("TypeName<PlayerController>", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("PlayerController", Property::Type::T_custom_type, Property::DecoratorType::D_normalized, {})}), sizeof(TypeName<PlayerController>), origin + offsetof(ApplicationSettings, playerControllerType), {
    })));
    properties.insert(std::make_pair<std::string, Property>("playerStateType", Property("playerStateType", Property::TypeDescriptor("TypeName<PlayerState>", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("PlayerState", Property::Type::T_custom_type, Property::DecoratorType::D_normalized, {})}), sizeof(TypeName<PlayerState>), origin + offsetof(ApplicationSettings, playerStateType), {
    })));
    return properties;
}
std::size_t ApplicationSettings::getTypeSize() const { return ApplicationSettingsType::type().size; }

const TypeDefinition& ApplicationSettingsType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new ApplicationSettings(); }, "ApplicationSettings", {
    }, sizeof(ApplicationSettings));
    return s_typeDefinition;
}

// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtproto/runtime.h>

#include <filesystem>
#include <awesome/asset/scene_asset.h>

enum class ApplicationMode : int
{
    Editor = 0,
    Server = 1,
    Standalone = 2,
};

template <>
struct EnumType<ApplicationMode>
{
    static const char* name() { return "ApplicationMode"; }
    static const std::map<const char*, int> values()
    {
        static std::map<const char*, int> s_values {
            { "Editor", static_cast<int>(ApplicationMode::Editor) },
            { "Server", static_cast<int>(ApplicationMode::Server) },
            { "Standalone", static_cast<int>(ApplicationMode::Standalone) },
        };
        return s_values;
    }
};

enum class FpsMode : int
{
    Fps30 = 30,
    Fps60 = 60,
    Fps90 = 90,
    Unlimited = 91,
};

template <>
struct EnumType<FpsMode>
{
    static const char* name() { return "FpsMode"; }
    static const std::map<const char*, int> values()
    {
        static std::map<const char*, int> s_values {
            { "Fps30", static_cast<int>(FpsMode::Fps30) },
            { "Fps60", static_cast<int>(FpsMode::Fps60) },
            { "Fps90", static_cast<int>(FpsMode::Fps90) },
            { "Unlimited", static_cast<int>(FpsMode::Unlimited) },
        };
        return s_values;
    }
};

class ApplicationSettings : public IProtoClass
{
public:
    virtual const TypeDescriptor& get_descriptor() const override;
    virtual fields_t get_fields() const override;

    static void autoload();
    static const TypeDescriptor& descriptor();

    ApplicationSettings() = default;

    FpsMode fps { FpsMode::Fps60 };
    ApplicationMode mode { ApplicationMode::Editor };
    std::filesystem::path workspacePath { std::filesystem::current_path() / ".." / "assets" };
    SceneAssetPtr editorScene;
    SceneAssetPtr serverScene;
    SceneAssetPtr standaloneScene;
    std::string serverIp;
    int serverPort { 96000 };
    int maxServerConnections { 20 };
};

class ApplicationSettingsType
{
public:
    ApplicationSettingsType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const ApplicationSettings* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};


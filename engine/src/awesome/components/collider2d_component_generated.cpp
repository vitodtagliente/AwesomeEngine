// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "collider2d_component.h"
#pragma warning(disable: 4100)

const char* const reflect::Enum<Collision2DShapeType>::name() { return "Collision2DShapeType"; }
const reflect::enum_values_t& reflect::Enum<Collision2DShapeType>::values()
{
    static reflect::enum_values_t s_values{
        { "Circle", static_cast<int>(Collision2DShapeType::Circle) }, 
        { "Rect", static_cast<int>(Collision2DShapeType::Rect) }, 
    };
    return s_values;
}

const reflect::meta_t& reflect::Type<Collider2dComponent>::meta()
{
    static reflect::meta_t s_meta {
        { "Type", "Component" },
    };
    return s_meta;
}
const char* const reflect::Type<Collider2dComponent>::name() { return "Collider2dComponent"; }

const reflect::properties_t& Type<Collider2dComponent>::properties()
{
    static reflect::properties_t s_properties {
        // Parent class Component properties
        { "enabled", reflect::Property{ offsetof(Collider2dComponent, enabled), reflect::meta_t { }, "enabled", reflect::PropertyType{ "bool", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(bool), reflect::PropertyType::Type::T_bool } } },
        { "m_id", reflect::Property{ offsetof(Collider2dComponent, m_id), reflect::meta_t { }, "m_id", reflect::PropertyType{ "uuid", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(uuid), reflect::PropertyType::Type::T_type } } },
        // Properties
        { "bounds", reflect::Property{ offsetof(Collider2dComponent, bounds), reflect::meta_t { }, "bounds", reflect::PropertyType{ "math::vec2", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(math::vec2), reflect::PropertyType::Type::T_native } } },
        { "isTrigger", reflect::Property{ offsetof(Collider2dComponent, isTrigger), reflect::meta_t { }, "isTrigger", reflect::PropertyType{ "bool", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(bool), reflect::PropertyType::Type::T_bool } } },
        { "m_type", reflect::Property{ offsetof(Collider2dComponent, m_type), reflect::meta_t { }, "m_type", reflect::PropertyType{ "Collision2DShapeType", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(Collision2DShapeType), reflect::PropertyType::Type::T_enum } } },
    };
    return s_properties;
}

std::size_t reflect::Type<Collider2dComponent>::size()
{
    return sizeof(Collider2dComponent);
}

void reflect::Type<Collider2dComponent>::from_string(const std::string& str, Collider2dComponent& type)
{
    reflect::encoding::ByteBuffer buffer;
    std::transform(
        std::begin(str),
        std::end(str),
        std::back_inserter(buffer),
        [](const char c)
        {
            return std::byte(c);
        }
    );
    
    reflect::encoding::InputByteStream stream(buffer);
    std::string _name;
    stream >> _name;
    if (_name != name()) return;
    
    // Parent class Component properties
    stream >> type.enabled;
    {
        std::string pack;
        stream >> pack;
        type.m_id.from_string(pack);
    }
    // Properties
    {
        std::string pack;
        stream >> pack;
        reflect::Type<math::vec2>::from_string(pack, type.bounds);
    }
    stream >> type.isTrigger;
    {
        int pack;
        stream >> pack;
        type.m_type = static_cast<Collision2DShapeType>(type.m_type);
    }
}

std::string reflect::Type<Collider2dComponent>::to_string(const Collider2dComponent& type)
{
    reflect::encoding::ByteBuffer buffer;
    reflect::encoding::OutputByteStream stream(buffer);
    stream << name();
    
    // Parent class Component properties
    stream << type.enabled;
    stream << static_cast<std::string>(type.m_id);
    // Properties
    stream << reflect::Type<math::vec2>::to_string(type.bounds);
    stream << type.isTrigger;
    stream << static_cast<int>(type.m_type);
    
    return std::string(reinterpret_cast<const char*>(&stream.getBuffer()[0]), stream.getBuffer().size());
}

void reflect::Type<Collider2dComponent>::from_json(const std::string& json, Collider2dComponent& type)
{
    std::string src{ reflect::encoding::json::Deserializer::trim(json, reflect::encoding::json::Deserializer::space) };
    
    size_t index = 0;
    std::string key;
    while ((index = reflect::encoding::json::Deserializer::next_key(src, key)) != std::string::npos)
    {
        src = src.substr(index + 2);
        src = reflect::encoding::json::Deserializer::ltrim(src, reflect::encoding::json::Deserializer::space);
        std::string value;
        index = reflect::encoding::json::Deserializer::next_value(src, value);
        if (index != std::string::npos)
        {
            // Parent class Component properties
            if (key == "enabled") reflect::encoding::json::Deserializer::parse(value, type.enabled);
            if (key == "m_id") type.m_id.from_json(value);
            // Properties
            if (key == "bounds") reflect::Type<math::vec2>::from_json(value, type.bounds);
            if (key == "isTrigger") reflect::encoding::json::Deserializer::parse(value, type.isTrigger);
            if (key == "m_type")
            {
                std::string temp;
                reflect::encoding::json::Deserializer::parse(value, temp);
                stringToEnum(value, type.m_type);
            }
            src = src.substr(index + 1);
        }
        else break;
    };
}

std::string reflect::Type<Collider2dComponent>::to_json(const Collider2dComponent& type, const std::string& offset)
{
    std::stringstream stream;
    stream << "{" << std::endl;
    stream << offset << "    " << "\"type_id\": " << "\"Collider2dComponent\"" << "," << std::endl;
    // Parent class Component properties
    stream << offset << "    " << "\"enabled\": " << reflect::encoding::json::Serializer::to_string(type.enabled) << "," << std::endl;
    stream << offset << "    " << "\"m_id\": " << type.m_id.to_json(offset + "    ") << "," << std::endl;
    // Properties
    stream << offset << "    " << "\"bounds\": " << reflect::Type<math::vec2>::to_json(type.bounds, offset + "    ") << "," << std::endl;
    stream << offset << "    " << "\"isTrigger\": " << reflect::encoding::json::Serializer::to_string(type.isTrigger) << "," << std::endl;
    stream << offset << "    " << "\"m_type\": " << reflect::encoding::json::Serializer::to_string(enumToString(type.m_type)) << "," << std::endl;
    stream << offset << "}";
    return stream.str();
}

const reflect::meta_t& Collider2dComponent::type_meta() const { return reflect::Type<Collider2dComponent>::meta(); }
const char* const Collider2dComponent::type_name() const { return reflect::Type<Collider2dComponent>::name(); }
const reflect::properties_t& Collider2dComponent::type_properties() const { return reflect::Type<Collider2dComponent>::properties(); }
Collider2dComponent::operator std::string() const { return reflect::Type<Collider2dComponent>::to_string(*this); }
void Collider2dComponent::from_string(const std::string& str)
{
    reflect::Type<Collider2dComponent>::from_string(str, *this);
    type_initialize();
}
void Collider2dComponent::from_json(const std::string& json)
{
    reflect::Type<Collider2dComponent>::from_json(json, *this);
    type_initialize();
}
std::string Collider2dComponent::to_json(const std::string& offset) const { return reflect::Type<Collider2dComponent>::to_json(*this, offset); }
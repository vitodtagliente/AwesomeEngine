// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "content_browser_window.h"

const meta_t& ContentBrowserWindow::getTypeMeta() const { return ContentBrowserWindowType::meta(); }
const char* ContentBrowserWindow::getTypeName() const { return ContentBrowserWindowType::name(); }
const properties_t ContentBrowserWindow::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Window::getTypeProperties();
    return properties;
}
std::size_t ContentBrowserWindow::getTypeSize() const { return sizeof(ContentBrowserWindow); }

ContentBrowserWindowType::ContentBrowserWindowType()
{
    TypeFactoryRegister::load(ContentBrowserWindowType::name(), []() -> const meta_t& { return ContentBrowserWindowType::meta(); }, []() -> IType* { return ContentBrowserWindowType::instantiate(); });
}

ContentBrowserWindow* const ContentBrowserWindowType::instantiate()
{
    return new ContentBrowserWindow();
}

const meta_t& ContentBrowserWindowType::meta()
{
    static meta_t s_meta{
        std::make_pair("Category", "Window"),
    };
    return s_meta;
}

const char* ContentBrowserWindowType::name() { return "ContentBrowserWindow"; }

ContentBrowserWindowType __contentbrowserwindow_type;


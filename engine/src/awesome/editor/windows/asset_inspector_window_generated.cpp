// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "asset_inspector_window.h"

const meta_t& AssetInspectorWindow::getTypeMeta() const { return AssetInspectorWindowType::meta(); }
const char* AssetInspectorWindow::getTypeName() const { return AssetInspectorWindowType::name(); }
const properties_t AssetInspectorWindow::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Window::getTypeProperties();
    return properties;
}
std::size_t AssetInspectorWindow::getTypeSize() const { return sizeof(AssetInspectorWindow); }

AssetInspectorWindowType::AssetInspectorWindowType()
{
    TypeFactoryRegister::load(AssetInspectorWindowType::name(), []() -> const meta_t& { return AssetInspectorWindowType::meta(); }, []() -> IType* { return AssetInspectorWindowType::instantiate(); });
}

AssetInspectorWindow* const AssetInspectorWindowType::instantiate()
{
    return new AssetInspectorWindow();
}

const meta_t& AssetInspectorWindowType::meta()
{
    static meta_t s_meta{
        std::make_pair("Category", "Window"),
    };
    return s_meta;
}

const char* AssetInspectorWindowType::name() { return "AssetInspectorWindow"; }

AssetInspectorWindowType __assetinspectorwindow_type;


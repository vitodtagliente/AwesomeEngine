// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "performance_window.h"

const meta_t& PerformanceWindow::getTypeMeta() const { return PerformanceWindowType::meta(); }
const char* PerformanceWindow::getTypeName() const { return PerformanceWindowType::name(); }
const properties_t PerformanceWindow::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Window::getTypeProperties();
    return properties;
}
std::size_t PerformanceWindow::getTypeSize() const { return sizeof(PerformanceWindow); }

PerformanceWindowType::PerformanceWindowType()
{
    TypeFactoryRegister::load(PerformanceWindowType::name(), []() -> const meta_t& { return PerformanceWindowType::meta(); }, []() -> IType* { return PerformanceWindowType::instantiate(); });
}

PerformanceWindow* const PerformanceWindowType::instantiate()
{
    return new PerformanceWindow();
}

const meta_t& PerformanceWindowType::meta()
{
    static meta_t s_meta{
        std::make_pair("Category", "Window"),
    };
    return s_meta;
}

const char* PerformanceWindowType::name() { return "PerformanceWindow"; }

PerformanceWindowType __performancewindow_type;


// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "log_window.h"

const meta_t& LogWindow::getTypeMeta() const { return LogWindowType::meta(); }
const char* LogWindow::getTypeName() const { return LogWindowType::name(); }
const properties_t LogWindow::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Window::getTypeProperties();
    return properties;
}
std::size_t LogWindow::getTypeSize() const { return sizeof(LogWindow); }

LogWindowType::LogWindowType()
{
    TypeFactoryRegister::load(LogWindowType::name(), []() -> const meta_t& { return LogWindowType::meta(); }, []() -> IType* { return LogWindowType::instantiate(); });
}

LogWindow* const LogWindowType::instantiate()
{
    return new LogWindow();
}

const meta_t& LogWindowType::meta()
{
    static meta_t s_meta{
        std::make_pair("Category", "Window"),
    };
    return s_meta;
}

const char* LogWindowType::name() { return "LogWindow"; }


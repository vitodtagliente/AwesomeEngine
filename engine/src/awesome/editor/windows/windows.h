// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtproto/runtime.h>

#include "asset_inspector_window.h"
#include "content_browser_window.h"
#include "entity_inspector_window.h"
#include "log_window.h"
#include "network_window.h"
#include "performance_window.h"
#include "scene_window.h"
#include "settings_window.h"

namespace editor
{

class AssetInspectorWindowType
{
public:
    AssetInspectorWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const AssetInspectorWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class ContentBrowserWindowType
{
public:
    ContentBrowserWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const ContentBrowserWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class EntityInspectorWindowType
{
public:
    EntityInspectorWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const EntityInspectorWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class LogWindowType
{
public:
    LogWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const LogWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class NetworkWindowType
{
public:
    NetworkWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const NetworkWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class PerformanceWindowType
{
public:
    PerformanceWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const PerformanceWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class SceneWindowType
{
public:
    SceneWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const SceneWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class SettingsWindowType
{
public:
    SettingsWindowType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const SettingsWindow* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

} // namespace editor

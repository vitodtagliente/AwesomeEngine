// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "entity_inspector_window.h"

const meta_t& EntityInspectorWindow::getTypeMeta() const { return EntityInspectorWindowType::meta(); }
const char* EntityInspectorWindow::getTypeName() const { return EntityInspectorWindowType::name(); }
const properties_t EntityInspectorWindow::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Window::getTypeProperties();
    return properties;
}
std::size_t EntityInspectorWindow::getTypeSize() const { return sizeof(EntityInspectorWindow); }

EntityInspectorWindowType::EntityInspectorWindowType()
{
    TypeFactoryRegister::load(EntityInspectorWindowType::name(), []() -> const meta_t& { return EntityInspectorWindowType::meta(); }, []() -> IType* { return EntityInspectorWindowType::instantiate(); });
}

EntityInspectorWindow* const EntityInspectorWindowType::instantiate()
{
    return new EntityInspectorWindow();
}

const meta_t& EntityInspectorWindowType::meta()
{
    static meta_t s_meta{
        std::make_pair("Category", "Window"),
    };
    return s_meta;
}

const char* EntityInspectorWindowType::name() { return "EntityInspectorWindow"; }


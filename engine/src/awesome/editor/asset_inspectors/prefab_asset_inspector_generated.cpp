// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "prefab_asset_inspector.h"
#pragma warning(disable: 4100)

const reflect::meta_t& reflect::Type<PrefabAssetInspector>::meta()
{
    static reflect::meta_t s_meta {
        { "Type", "AssetInspector" },
    };
    return s_meta;
}
const char* const reflect::Type<PrefabAssetInspector>::name() { return "PrefabAssetInspector"; }

const reflect::properties_t& Type<PrefabAssetInspector>::properties()
{
    static reflect::properties_t s_properties {
        // Parent class AssetInspector properties
        // Properties
    };
    return s_properties;
}

std::size_t reflect::Type<PrefabAssetInspector>::size()
{
    return sizeof(PrefabAssetInspector);
}

void reflect::Type<PrefabAssetInspector>::from_string(const std::string& str, PrefabAssetInspector& type)
{
    reflect::encoding::ByteBuffer buffer;
    std::transform(
        std::begin(str),
        std::end(str),
        std::back_inserter(buffer),
        [](const char c)
        {
            return std::byte(c);
        }
    );
    
    reflect::encoding::InputByteStream stream(buffer);
    std::string _name;
    stream >> _name;
    if (_name != name()) return;
    
    // Parent class AssetInspector properties
    // Properties
}

std::string reflect::Type<PrefabAssetInspector>::to_string(const PrefabAssetInspector& type)
{
    reflect::encoding::ByteBuffer buffer;
    reflect::encoding::OutputByteStream stream(buffer);
    stream << name();
    
    // Parent class AssetInspector properties
    // Properties
    
    return std::string(reinterpret_cast<const char*>(&stream.getBuffer()[0]), stream.getBuffer().size());
}

void reflect::Type<PrefabAssetInspector>::from_json(const std::string& json, PrefabAssetInspector& type)
{
    std::string src{ reflect::encoding::json::Deserializer::trim(json, reflect::encoding::json::Deserializer::space) };
    
    size_t index = 0;
    std::string key;
    while ((index = reflect::encoding::json::Deserializer::next_key(src, key)) != std::string::npos)
    {
        src = src.substr(index + 2);
        src = reflect::encoding::json::Deserializer::ltrim(src, reflect::encoding::json::Deserializer::space);
        std::string value;
        index = reflect::encoding::json::Deserializer::next_value(src, value);
        if (index != std::string::npos)
        {
            // Parent class AssetInspector properties
            // Properties
            src = src.substr(index + 1);
        }
        else break;
    };
}

std::string reflect::Type<PrefabAssetInspector>::to_json(const PrefabAssetInspector& type, const std::string& offset)
{
    std::stringstream stream;
    stream << "{" << std::endl;
    stream << offset << "    " << "\"type_id\": " << "\"PrefabAssetInspector\"" << "," << std::endl;
    // Parent class AssetInspector properties
    // Properties
    stream << offset << "}";
    return stream.str();
}

const reflect::meta_t& PrefabAssetInspector::type_meta() const { return reflect::Type<PrefabAssetInspector>::meta(); }
const char* const PrefabAssetInspector::type_name() const { return reflect::Type<PrefabAssetInspector>::name(); }
const reflect::properties_t& PrefabAssetInspector::type_properties() const { return reflect::Type<PrefabAssetInspector>::properties(); }
PrefabAssetInspector::operator std::string() const { return reflect::Type<PrefabAssetInspector>::to_string(*this); }
void PrefabAssetInspector::from_string(const std::string& str)
{
    reflect::Type<PrefabAssetInspector>::from_string(str, *this);
    type_initialize();
}
void PrefabAssetInspector::from_json(const std::string& json)
{
    reflect::Type<PrefabAssetInspector>::from_json(json, *this);
    type_initialize();
}
std::string PrefabAssetInspector::to_json(const std::string& offset) const { return reflect::Type<PrefabAssetInspector>::to_json(*this, offset); }
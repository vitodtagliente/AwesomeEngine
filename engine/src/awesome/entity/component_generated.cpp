// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "component.h"

const meta_t& Component::getTypeMeta() const { return ComponentType::meta(); }
const char* Component::getTypeName() const { return ComponentType::name(); }
const properties_t Component::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("enabled", Property("enabled", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Component, enabled), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_id", Property("m_id", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Component, m_id), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_netMode", Property("m_netMode", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Component, m_netMode), {
    })));
    return properties;
}
std::size_t Component::getTypeSize() const { return sizeof(Component); }

ComponentType::ComponentType()
{
    TypeFactoryRegister::load(ComponentType::name(), []() -> const meta_t& { return ComponentType::meta(); }, []() -> IType* { return ComponentType::instantiate(); });
}

Component* const ComponentType::instantiate()
{
    return new Component();
}

const meta_t& ComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* ComponentType::name() { return "Component"; }


// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "component.h"

const meta_t& Component::getTypeMeta() const { return __ComponentType::type().meta; }
const std::string& Component::getTypeName() const { return __ComponentType::type().name; }
const properties_t Component::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("enabled", Property("enabled", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(Component, enabled), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_id", Property("m_id", Property::TypeDescriptor("uuid", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(uuid), origin + offsetof(Component, m_id), {
    })));
    return properties;
}
std::size_t Component::getTypeSize() const { return __ComponentType::type().size; }

const TypeDefinition& __ComponentType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new Component(); }, "Component", {
    }, sizeof(Component));
    return s_typeDefinition;
}

// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "entity.h"

const meta_t& Entity::getTypeMeta() const { return EntityType::type().meta; }
const std::string& Entity::getTypeName() const { return EntityType::type().name; }
const properties_t Entity::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("name", Property("name", Property::TypeDescriptor("std::string", Property::Type::T_container_string, Property::DecoratorType::D_normalized, {}), sizeof(std::string), origin + offsetof(Entity, name), {
    })));
    properties.insert(std::make_pair<std::string, Property>("persistent", Property("persistent", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(Entity, persistent), {
    })));
    properties.insert(std::make_pair<std::string, Property>("replicate", Property("replicate", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(Entity, replicate), {
    })));
    properties.insert(std::make_pair<std::string, Property>("tag", Property("tag", Property::TypeDescriptor("std::string", Property::Type::T_container_string, Property::DecoratorType::D_normalized, {}), sizeof(std::string), origin + offsetof(Entity, tag), {
    })));
    properties.insert(std::make_pair<std::string, Property>("transform", Property("transform", Property::TypeDescriptor("math::transform", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(math::transform), origin + offsetof(Entity, transform), {
    })));
    properties.insert(std::make_pair<std::string, Property>("transient", Property("transient", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(Entity, transient), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_id", Property("m_id", Property::TypeDescriptor("uuid", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(uuid), origin + offsetof(Entity, m_id), {
    })));
    return properties;
}
std::size_t Entity::getTypeSize() const { return EntityType::type().size; }

const TypeDefinition& EntityType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new Entity(); }, "Entity", {
        std::make_pair("Type", "Entity"),
    }, sizeof(Entity));
    return s_typeDefinition;
}

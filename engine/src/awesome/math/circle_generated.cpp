// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "circle.h"
#pragma warning(disable: 4100)

const reflect::meta_t& reflect::Type<math::circle>::meta()
{
    static reflect::meta_t s_meta {
        { "forward_declaration", "namespace math { typedef struct circle_t<float> circle; }" },
    };
    return s_meta;
}
const char* const reflect::Type<math::circle>::name() { return "math::circle"; }

const reflect::properties_t& Type<math::circle>::properties()
{
    static reflect::properties_t s_properties {
        { "x", reflect::Property{ offsetof(math::circle, x), reflect::meta_t { }, "x", reflect::PropertyType{ "float", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(float), reflect::PropertyType::Type::T_float } } },
        { "y", reflect::Property{ offsetof(math::circle, y), reflect::meta_t { }, "y", reflect::PropertyType{ "float", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(float), reflect::PropertyType::Type::T_float } } },
        { "radius", reflect::Property{ offsetof(math::circle, radius), reflect::meta_t { }, "radius", reflect::PropertyType{ "float", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(float), reflect::PropertyType::Type::T_float } } },
    };
    return s_properties;
}

std::size_t reflect::Type<math::circle>::size()
{
    return sizeof(math::circle);
}

void reflect::Type<math::circle>::from_string(const std::string& str, math::circle& type)
{
    reflect::encoding::ByteBuffer buffer;
    std::transform(
        std::begin(str),
        std::end(str),
        std::back_inserter(buffer),
        [](const char c)
        {
            return std::byte(c);
        }
    );
    
    reflect::encoding::InputByteStream stream(buffer);
    std::string _name;
    stream >> _name;
    if (_name != name()) return;
    
    stream >> type.x;
    stream >> type.y;
    stream >> type.radius;
}

std::string reflect::Type<math::circle>::to_string(const math::circle& type)
{
    reflect::encoding::ByteBuffer buffer;
    reflect::encoding::OutputByteStream stream(buffer);
    stream << name();
    
    stream << type.x;
    stream << type.y;
    stream << type.radius;
    
    return std::string(reinterpret_cast<const char*>(&stream.getBuffer()[0]), stream.getBuffer().size());
}

void reflect::Type<math::circle>::from_json(const std::string& json, math::circle& type)
{
    std::string src{ reflect::encoding::json::Deserializer::trim(json, reflect::encoding::json::Deserializer::space) };
    
    size_t index = 0;
    std::string key;
    while ((index = reflect::encoding::json::Deserializer::next_key(src, key)) != std::string::npos)
    {
        src = src.substr(index + 2);
        src = reflect::encoding::json::Deserializer::ltrim(src, reflect::encoding::json::Deserializer::space);
        std::string value;
        index = reflect::encoding::json::Deserializer::next_value(src, value);
        if (index != std::string::npos)
        {
            if (key == "x") reflect::encoding::json::Deserializer::parse(value, type.x);
            if (key == "y") reflect::encoding::json::Deserializer::parse(value, type.y);
            if (key == "radius") reflect::encoding::json::Deserializer::parse(value, type.radius);
            src = src.substr(index + 1);
        }
        else break;
    };
}

std::string reflect::Type<math::circle>::to_json(const math::circle& type, const std::string& offset)
{
    std::stringstream stream;
    stream << "{" << std::endl;
    stream << offset << "    " << "\"type_id\": " << "\"math::circle\"" << "," << std::endl;
    stream << offset << "    " << "\"x\": " << reflect::encoding::json::Serializer::to_string(type.x) << "," << std::endl;
    stream << offset << "    " << "\"y\": " << reflect::encoding::json::Serializer::to_string(type.y) << "," << std::endl;
    stream << offset << "    " << "\"radius\": " << reflect::encoding::json::Serializer::to_string(type.radius) << "," << std::endl;
    stream << offset << "}";
    return stream.str();
}
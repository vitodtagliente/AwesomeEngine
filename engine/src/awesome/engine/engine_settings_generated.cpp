// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "engine_settings.h"

const char* const Enum<EngineMode>::name() { return "EngineMode"; }
const enum_values_t& Enum<EngineMode>::values()
{
    static enum_values_t s_values{
        { "Editor", static_cast<int>(EngineMode::Editor) }, 
        { "Server", static_cast<int>(EngineMode::Server) }, 
        { "Standalone", static_cast<int>(EngineMode::Standalone) }, 
    };
    return s_values;
}

const char* const Enum<FpsMode>::name() { return "FpsMode"; }
const enum_values_t& Enum<FpsMode>::values()
{
    static enum_values_t s_values{
        { "Fps30", static_cast<int>(FpsMode::Fps30) }, 
        { "Fps60", static_cast<int>(FpsMode::Fps60) }, 
        { "Fps90", static_cast<int>(FpsMode::Fps90) }, 
        { "Unlimited", static_cast<int>(FpsMode::Unlimited) }, 
    };
    return s_values;
}

const type_meta_t& Type<EngineSettings>::meta()
{
    static type_meta_t s_meta {
    };
    return s_meta;
}
const char* const Type<EngineSettings>::name() { return "EngineSettings"; }

const type_properties_t& Type<EngineSettings>::properties()
{
    static type_properties_t s_properties {
        { "fps", Property{ offsetof(EngineSettings, fps), type_meta_t { }, "fps", NativeType{ "FpsMode", {  }, NativeType::DecoratorType::D_raw, sizeof(FpsMode), NativeType::Type::T_enum } } },
        { "mode", Property{ offsetof(EngineSettings, mode), type_meta_t { }, "mode", NativeType{ "EngineMode", {  }, NativeType::DecoratorType::D_raw, sizeof(EngineMode), NativeType::Type::T_enum } } },
        { "workspacePath", Property{ offsetof(EngineSettings, workspacePath), type_meta_t { }, "workspacePath", NativeType{ "std::filesystem::path", {  }, NativeType::DecoratorType::D_raw, sizeof(std::filesystem::path), NativeType::Type::T_unknown } } },
    };
    return s_properties;
}

const type_meta_t& EngineSettings::type_meta() const { return Type<EngineSettings>::meta(); }
const char* const EngineSettings::type_name() const { return Type<EngineSettings>::name(); }
const type_properties_t& EngineSettings::type_properties() const { return Type<EngineSettings>::properties(); }


// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "engine_settings.h"

const char* EnumType<EngineMode>::name() { return "EngineMode"; }
const enum_values_t& EnumType<EngineMode>::values()
{
    static enum_values_t s_values{
        { "Editor", static_cast<int>(EngineMode::Editor) }, 
        { "Server", static_cast<int>(EngineMode::Server) }, 
        { "Standalone", static_cast<int>(EngineMode::Standalone) }, 
    };
    return s_values;
}

const char* EnumType<FpsMode>::name() { return "FpsMode"; }
const enum_values_t& EnumType<FpsMode>::values()
{
    static enum_values_t s_values{
        { "Fps30", static_cast<int>(FpsMode::Fps30) }, 
        { "Fps60", static_cast<int>(FpsMode::Fps60) }, 
        { "Fps90", static_cast<int>(FpsMode::Fps90) }, 
        { "Unlimited", static_cast<int>(FpsMode::Unlimited) }, 
    };
    return s_values;
}

const meta_t& EngineSettings::getTypeMeta() const { return __EngineSettingsType::type().meta; }
const std::string& EngineSettings::getTypeName() const { return __EngineSettingsType::type().name; }
const properties_t EngineSettings::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("fps", Property("fps", Property::TypeDescriptor("FpsMode", Property::Type::T_custom_enum, Property::DecoratorType::D_normalized, {}), sizeof(FpsMode), origin + offsetof(EngineSettings, fps), {
    })));
    properties.insert(std::make_pair<std::string, Property>("mode", Property("mode", Property::TypeDescriptor("EngineMode", Property::Type::T_custom_enum, Property::DecoratorType::D_normalized, {}), sizeof(EngineMode), origin + offsetof(EngineSettings, mode), {
    })));
    properties.insert(std::make_pair<std::string, Property>("workspacePath", Property("workspacePath", Property::TypeDescriptor("std::filesystem::path", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(std::filesystem::path), origin + offsetof(EngineSettings, workspacePath), {
    })));
    return properties;
}
std::size_t EngineSettings::getTypeSize() const { return __EngineSettingsType::type().size; }
const meta_t& EngineSettings::staticTypeMeta() { return __EngineSettingsType::type().meta; }
const std::string& EngineSettings::staticTypeName() { return __EngineSettingsType::type().name; }

const TypeDefinition& __EngineSettingsType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new EngineSettings(); }, "EngineSettings", {
    }, sizeof(EngineSettings));
    return s_typeDefinition;
}

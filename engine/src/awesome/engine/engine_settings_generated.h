// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtreflect/runtime.h>

template <>
struct reflect::Enum<enum class EngineMode> : reflect::RegisteredInEnumFactory<enum class EngineMode>
{
    static const char* const name();
    static const reflect::enum_values_t& values();
    
    static bool registered() { return value; };
};

template <>
struct reflect::Enum<enum class FpsMode> : reflect::RegisteredInEnumFactory<enum class FpsMode>
{
    static const char* const name();
    static const reflect::enum_values_t& values();
    
    static bool registered() { return value; };
};

template <>
struct reflect::Type<struct RendererSettings> : reflect::RegisteredInTypeFactory<struct RendererSettings>
{
    static const reflect::meta_t& meta();
    static const char* const name();
    static const reflect::properties_t& properties();
    static std::size_t size();

    static void from_string(const std::string& str, RendererSettings& type);
    static std::string to_string(const RendererSettings& type);
    static void from_json(const std::string& json, RendererSettings& type);
    static std::string to_json(const RendererSettings& type, const std::string& offset = "");

    static bool registered() { return type_registered; };
};

template <>
struct reflect::Type<struct SceneSettings> : reflect::RegisteredInTypeFactory<struct SceneSettings>
{
    static const reflect::meta_t& meta();
    static const char* const name();
    static const reflect::properties_t& properties();
    static std::size_t size();

    static void from_string(const std::string& str, SceneSettings& type);
    static std::string to_string(const SceneSettings& type);
    static void from_json(const std::string& json, SceneSettings& type);
    static std::string to_json(const SceneSettings& type, const std::string& offset = "");

    static bool registered() { return type_registered; };
};

template <>
struct reflect::Type<struct EngineSettings> : reflect::RegisteredInTypeFactory<struct EngineSettings>
{
    static const reflect::meta_t& meta();
    static const char* const name();
    static const reflect::properties_t& properties();
    static std::size_t size();

    static void from_string(const std::string& str, EngineSettings& type);
    static std::string to_string(const EngineSettings& type);
    static void from_json(const std::string& json, EngineSettings& type);
    static std::string to_json(const EngineSettings& type, const std::string& offset = "");

    static bool registered() { return type_registered; };
};
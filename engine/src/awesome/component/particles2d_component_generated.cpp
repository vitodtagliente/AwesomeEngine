// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "particles2d_component.h"

const meta_t& Particles2dComponent::getTypeMeta() const { return Particles2dComponentType::meta(); }
const char* Particles2dComponent::getTypeName() const { return Particles2dComponentType::name(); }
const properties_t Particles2dComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("autoplay", Property("autoplay", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Particles2dComponent, autoplay), {
    })));
    properties.insert(std::make_pair<std::string, Property>("loop", Property("loop", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Particles2dComponent, loop), {
    })));
    return properties;
}
std::size_t Particles2dComponent::getTypeSize() const { return sizeof(Particles2dComponent); }

Particles2dComponentType::Particles2dComponentType()
{
    TypeFactoryRegister::load(Particles2dComponentType::name(), []() -> const meta_t& { return Particles2dComponentType::meta(); }, []() -> IType* { return Particles2dComponentType::instantiate(); });
}

Particles2dComponent* const Particles2dComponentType::instantiate()
{
    return new Particles2dComponent();
}

const meta_t& Particles2dComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* Particles2dComponentType::name() { return "Particles2dComponent"; }


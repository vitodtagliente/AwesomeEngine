// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "camera_component.h"

const meta_t& CameraComponent::getTypeMeta() const { return CameraComponentType::meta(); }
const char* CameraComponent::getTypeName() const { return CameraComponentType::name(); }
const properties_t CameraComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("color", Property("color", NativeType::NT_int, "int", sizeof(int), origin + offsetof(CameraComponent, color), {
    })));
    return properties;
}
std::size_t CameraComponent::getTypeSize() const { return sizeof(CameraComponent); }

CameraComponentType::CameraComponentType()
{
    TypeFactoryRegister::load(CameraComponentType::name(), []() -> const meta_t& { return CameraComponentType::meta(); }, []() -> IType* { return CameraComponentType::instantiate(); });
}

CameraComponent* const CameraComponentType::instantiate()
{
    return new CameraComponent();
}

const meta_t& CameraComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* CameraComponentType::name() { return "CameraComponent"; }

CameraComponentType __cameracomponent_type;


// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "particles2d.h"

const meta_t& Particles2d::getTypeMeta() const { return Particles2dType::meta(); }
const char* Particles2d::getTypeName() const { return Particles2dType::name(); }
const properties_t Particles2d::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("autoplay", Property("autoplay", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Particles2d, autoplay), {
    })));
    properties.insert(std::make_pair<std::string, Property>("loop", Property("loop", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Particles2d, loop), {
    })));
    return properties;
}
std::size_t Particles2d::getTypeSize() const { return sizeof(Particles2d); }

Particles2dType::Particles2dType()
{
    TypeFactoryRegister::load(Particles2dType::name(), []() -> const meta_t& { return Particles2dType::meta(); }, []() -> IType* { return Particles2dType::instantiate(); });
}

Particles2d* const Particles2dType::instantiate()
{
    return new Particles2d();
}

const meta_t& Particles2dType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* Particles2dType::name() { return "Particles2d"; }

Particles2dType __particles2d_type;


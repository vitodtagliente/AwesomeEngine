// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "gizmos_renderer.h"

const meta_t& GizmosRenderer::getTypeMeta() const { return GizmosRendererType::meta(); }
const char* GizmosRenderer::getTypeName() const { return GizmosRendererType::name(); }
const properties_t GizmosRenderer::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("type", Property("type", NativeType::NT_int, "int", sizeof(int), origin + offsetof(GizmosRenderer, type), {
    })));
    properties.insert(std::make_pair<std::string, Property>("color", Property("color", NativeType::NT_int, "int", sizeof(int), origin + offsetof(GizmosRenderer, color), {
    })));
    return properties;
}
std::size_t GizmosRenderer::getTypeSize() const { return sizeof(GizmosRenderer); }

GizmosRendererType::GizmosRendererType()
{
    TypeFactoryRegister::load(GizmosRendererType::name(), []() -> const meta_t& { return GizmosRendererType::meta(); }, []() -> IType* { return GizmosRendererType::instantiate(); });
}

GizmosRenderer* const GizmosRendererType::instantiate()
{
    return new GizmosRenderer();
}

const meta_t& GizmosRendererType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* GizmosRendererType::name() { return "GizmosRenderer"; }

GizmosRendererType __gizmosrenderer_type;


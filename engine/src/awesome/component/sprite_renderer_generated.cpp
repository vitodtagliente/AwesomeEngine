// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "sprite_renderer.h"

const meta_t& SpriteRenderer::getTypeMeta() const { return SpriteRendererType::meta(); }
const char* SpriteRenderer::getTypeName() const { return SpriteRendererType::name(); }
const properties_t SpriteRenderer::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("flipX", Property("flipX", NativeType::NT_int, "int", sizeof(int), origin + offsetof(SpriteRenderer, flipX), {
    })));
    properties.insert(std::make_pair<std::string, Property>("flipY", Property("flipY", NativeType::NT_int, "int", sizeof(int), origin + offsetof(SpriteRenderer, flipY), {
    })));
    return properties;
}
std::size_t SpriteRenderer::getTypeSize() const { return sizeof(SpriteRenderer); }

SpriteRendererType::SpriteRendererType()
{
    TypeFactoryRegister::load(SpriteRendererType::name(), []() -> const meta_t& { return SpriteRendererType::meta(); }, []() -> IType* { return SpriteRendererType::instantiate(); });
}

SpriteRenderer* const SpriteRendererType::instantiate()
{
    return new SpriteRenderer();
}

const meta_t& SpriteRendererType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* SpriteRendererType::name() { return "SpriteRenderer"; }

SpriteRendererType __spriterenderer_type;


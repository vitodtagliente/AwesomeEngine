// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "orthographic_camera_component.h"

const meta_t& OrthographicCameraComponent::getTypeMeta() const { return OrthographicCameraComponentType::type().meta; }
const std::string& OrthographicCameraComponent::getTypeName() const { return OrthographicCameraComponentType::type().name; }
const properties_t OrthographicCameraComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = CameraComponent::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("nearPlane", Property("nearPlane", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(OrthographicCameraComponent, nearPlane), {
    })));
    properties.insert(std::make_pair<std::string, Property>("farPlane", Property("farPlane", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(OrthographicCameraComponent, farPlane), {
    })));
    properties.insert(std::make_pair<std::string, Property>("pixelPerfect", Property("pixelPerfect", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(OrthographicCameraComponent, pixelPerfect), {
    })));
    properties.insert(std::make_pair<std::string, Property>("pixelsPerUnit", Property("pixelsPerUnit", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(OrthographicCameraComponent, pixelsPerUnit), {
    })));
    return properties;
}
std::size_t OrthographicCameraComponent::getTypeSize() const { return OrthographicCameraComponentType::type().size; }

const Type& OrthographicCameraComponentType::type()
{
    static const Type s_type([]() -> IType* { return new OrthographicCameraComponent(); }, "OrthographicCameraComponent", {
        std::make_pair("Category", "Component"),
    }, sizeof(OrthographicCameraComponent));
    return s_type;
}

// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "collider2d_component.h"

const meta_t& Collider2dComponent::getTypeMeta() const { return Collider2dComponentType::meta(); }
const char* Collider2dComponent::getTypeName() const { return Collider2dComponentType::name(); }
const properties_t Collider2dComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("isTrigger", Property("isTrigger", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, isTrigger), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_type", Property("m_type", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, m_type), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_rectSize", Property("m_rectSize", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, m_rectSize), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_circleSize", Property("m_circleSize", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, m_circleSize), {
    })));
    return properties;
}
std::size_t Collider2dComponent::getTypeSize() const { return sizeof(Collider2dComponent); }

Collider2dComponentType::Collider2dComponentType()
{
    TypeFactoryRegister::load(Collider2dComponentType::name(), []() -> const meta_t& { return Collider2dComponentType::meta(); }, []() -> IType* { return Collider2dComponentType::instantiate(); });
}

Collider2dComponent* const Collider2dComponentType::instantiate()
{
    return new Collider2dComponent();
}

const meta_t& Collider2dComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* Collider2dComponentType::name() { return "Collider2dComponent"; }

Collider2dComponentType __collider2dcomponent_type;


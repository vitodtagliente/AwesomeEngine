// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "collider2d_component.h"

const meta_t& Collider2dComponent::getTypeMeta() const { return Collider2dComponentType::type().meta; }
const std::string& Collider2dComponent::getTypeName() const { return Collider2dComponentType::type().name; }
const properties_t Collider2dComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("isTrigger", Property("isTrigger", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(Collider2dComponent, isTrigger), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_type", Property("m_type", Property::TypeDescriptor("ShapeType", Property::Type::T_custom_enum, Property::DecoratorType::D_normalized, {}), sizeof(ShapeType), origin + offsetof(Collider2dComponent, m_type), {
        std::make_pair("IsEnum", ""),
    })));
    properties.insert(std::make_pair<std::string, Property>("m_bounds", Property("m_bounds", Property::TypeDescriptor("math::vec2", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(math::vec2), origin + offsetof(Collider2dComponent, m_bounds), {
    })));
    return properties;
}
std::size_t Collider2dComponent::getTypeSize() const { return Collider2dComponentType::type().size; }

const TypeDefinition& Collider2dComponentType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> IType* { return new Collider2dComponent(); }, "Collider2dComponent", {
        std::make_pair("Category", "Component"),
    }, sizeof(Collider2dComponent));
    return s_typeDefinition;
}

// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "collider2d_component.h"

const meta_t& Collider2dComponent::getTypeMeta() const { return Collider2dComponentType::type().meta; }
const std::string& Collider2dComponent::getTypeName() const { return Collider2dComponentType::type().name; }
const properties_t Collider2dComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("isTrigger", Property("isTrigger", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, isTrigger), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_type", Property("m_type", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, m_type), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_rectSize", Property("m_rectSize", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, m_rectSize), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_circleSize", Property("m_circleSize", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2dComponent, m_circleSize), {
    })));
    return properties;
}
std::size_t Collider2dComponent::getTypeSize() const { return Collider2dComponentType::type().size; }

const Type& Collider2dComponentType::type()
{
    static const Type s_type([]() -> IType* { return new Collider2dComponent(); }, "Collider2dComponent", {
    }, sizeof(Collider2dComponent));
    return s_type;
}

// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "camera_controller_2d.h"

const meta_t& CameraController2d::getTypeMeta() const { return CameraController2dType::meta(); }
const char* CameraController2d::getTypeName() const { return CameraController2dType::name(); }
const properties_t CameraController2d::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("speed", Property("speed", NativeType::NT_int, "int", sizeof(int), origin + offsetof(CameraController2d, speed), {
    })));
    properties.insert(std::make_pair<std::string, Property>("zoomSpeed", Property("zoomSpeed", NativeType::NT_int, "int", sizeof(int), origin + offsetof(CameraController2d, zoomSpeed), {
    })));
    return properties;
}
std::size_t CameraController2d::getTypeSize() const { return sizeof(CameraController2d); }

CameraController2dType::CameraController2dType()
{
    TypeFactoryRegister::load(CameraController2dType::name(), []() -> const meta_t& { return CameraController2dType::meta(); }, []() -> IType* { return CameraController2dType::instantiate(); });
}

CameraController2d* const CameraController2dType::instantiate()
{
    return new CameraController2d();
}

const meta_t& CameraController2dType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* CameraController2dType::name() { return "CameraController2d"; }

CameraController2dType __cameracontroller2d_type;


// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "sprite_renderer_component.h"

const meta_t& SpriteRendererComponent::getTypeMeta() const { return SpriteRendererComponentType::type().meta; }
const std::string& SpriteRendererComponent::getTypeName() const { return SpriteRendererComponentType::type().name; }
const properties_t SpriteRendererComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("flipX", Property("flipX", PropertyType::T_bool, "bool", true, sizeof(bool), origin + offsetof(SpriteRendererComponent, flipX), {
    })));
    properties.insert(std::make_pair<std::string, Property>("flipY", Property("flipY", PropertyType::T_bool, "bool", true, sizeof(bool), origin + offsetof(SpriteRendererComponent, flipY), {
    })));
    return properties;
}
std::size_t SpriteRendererComponent::getTypeSize() const { return SpriteRendererComponentType::type().size; }

const Type& SpriteRendererComponentType::type()
{
    static const Type s_type([]() -> IType* { return new SpriteRendererComponent(); }, "SpriteRendererComponent", {
        std::make_pair("Category", "Component"),
    }, sizeof(SpriteRendererComponent));
    return s_type;
}

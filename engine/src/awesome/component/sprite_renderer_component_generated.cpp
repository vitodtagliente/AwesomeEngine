// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "sprite_renderer_component.h"

const meta_t& SpriteRendererComponent::getTypeMeta() const { return SpriteRendererComponentType::meta(); }
const char* SpriteRendererComponent::getTypeName() const { return SpriteRendererComponentType::name(); }
const properties_t SpriteRendererComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("flipX", Property("flipX", NativeType::NT_int, "int", sizeof(int), origin + offsetof(SpriteRendererComponent, flipX), {
    })));
    properties.insert(std::make_pair<std::string, Property>("flipY", Property("flipY", NativeType::NT_int, "int", sizeof(int), origin + offsetof(SpriteRendererComponent, flipY), {
    })));
    return properties;
}
std::size_t SpriteRendererComponent::getTypeSize() const { return sizeof(SpriteRendererComponent); }

SpriteRendererComponentType::SpriteRendererComponentType()
{
    TypeFactoryRegister::load(SpriteRendererComponentType::name(), []() -> const meta_t& { return SpriteRendererComponentType::meta(); }, []() -> IType* { return SpriteRendererComponentType::instantiate(); });
}

SpriteRendererComponent* const SpriteRendererComponentType::instantiate()
{
    return new SpriteRendererComponent();
}

const meta_t& SpriteRendererComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* SpriteRendererComponentType::name() { return "SpriteRendererComponent"; }


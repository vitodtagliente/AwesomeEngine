// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "collider2d.h"

const meta_t& Collider2d::getTypeMeta() const { return Collider2dType::meta(); }
const char* Collider2d::getTypeName() const { return Collider2dType::name(); }
const properties_t Collider2d::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("isTrigger", Property("isTrigger", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2d, isTrigger), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_type", Property("m_type", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2d, m_type), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_rectSize", Property("m_rectSize", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2d, m_rectSize), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_circleSize", Property("m_circleSize", NativeType::NT_int, "int", sizeof(int), origin + offsetof(Collider2d, m_circleSize), {
    })));
    return properties;
}
std::size_t Collider2d::getTypeSize() const { return sizeof(Collider2d); }

Collider2dType::Collider2dType()
{
    TypeFactoryRegister::load(Collider2dType::name(), []() -> const meta_t& { return Collider2dType::meta(); }, []() -> IType* { return Collider2dType::instantiate(); });
}

Collider2d* const Collider2dType::instantiate()
{
    return new Collider2d();
}

const meta_t& Collider2dType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* Collider2dType::name() { return "Collider2d"; }

Collider2dType __collider2d_type;


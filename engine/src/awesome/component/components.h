// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtproto/runtime.h>

#include "body2d.h"
#include "camera.h"
#include "camera_controller_2d.h"
#include "collider2d.h"
#include "gizmos_renderer.h"
#include "orthographic_camera.h"
#include "particles2d.h"
#include "sprite_animator.h"
#include "sprite_renderer.h"

namespace component
{

class Body2dType
{
public:
    Body2dType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Body2d* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class CameraType
{
public:
    CameraType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Camera* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class CameraController2dType
{
public:
    CameraController2dType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const CameraController2d* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class Collider2dType
{
public:
    Collider2dType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Collider2d* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class GizmosRendererType
{
public:
    GizmosRendererType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const GizmosRenderer* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class OrthographicCameraType
{
public:
    OrthographicCameraType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const OrthographicCamera* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class Particles2dType
{
public:
    Particles2dType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Particles2d* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class SpriteAnimatorType
{
public:
    SpriteAnimatorType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const SpriteAnimator* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class SpriteRendererType
{
public:
    SpriteRendererType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const SpriteRenderer* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

} // namespace component

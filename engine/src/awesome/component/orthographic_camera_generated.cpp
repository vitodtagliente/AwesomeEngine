// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "orthographic_camera.h"

const meta_t& OrthographicCamera::getTypeMeta() const { return OrthographicCameraType::meta(); }
const char* OrthographicCamera::getTypeName() const { return OrthographicCameraType::name(); }
const properties_t OrthographicCamera::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = BaseCamera::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("nearPlane", Property("nearPlane", NativeType::NT_int, "int", sizeof(int), origin + offsetof(OrthographicCamera, nearPlane), {
    })));
    properties.insert(std::make_pair<std::string, Property>("farPlane", Property("farPlane", NativeType::NT_int, "int", sizeof(int), origin + offsetof(OrthographicCamera, farPlane), {
    })));
    properties.insert(std::make_pair<std::string, Property>("pixelPerfect", Property("pixelPerfect", NativeType::NT_int, "int", sizeof(int), origin + offsetof(OrthographicCamera, pixelPerfect), {
    })));
    properties.insert(std::make_pair<std::string, Property>("pixelsPerUnit", Property("pixelsPerUnit", NativeType::NT_int, "int", sizeof(int), origin + offsetof(OrthographicCamera, pixelsPerUnit), {
    })));
    return properties;
}
std::size_t OrthographicCamera::getTypeSize() const { return sizeof(OrthographicCamera); }

OrthographicCameraType::OrthographicCameraType()
{
    TypeFactoryRegister::load(OrthographicCameraType::name(), []() -> const meta_t& { return OrthographicCameraType::meta(); }, []() -> IType* { return OrthographicCameraType::instantiate(); });
}

OrthographicCamera* const OrthographicCameraType::instantiate()
{
    return new OrthographicCamera();
}

const meta_t& OrthographicCameraType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* OrthographicCameraType::name() { return "OrthographicCamera"; }

OrthographicCameraType __orthographiccamera_type;


// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "sprite_animator_component.h"

const meta_t& SpriteAnimatorComponent::getTypeMeta() const { return SpriteAnimatorComponentType::type().meta; }
const std::string& SpriteAnimatorComponent::getTypeName() const { return SpriteAnimatorComponentType::type().name; }
const properties_t SpriteAnimatorComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("animations", Property("animations", Property::TypeDescriptor("std::map<std::string, SpriteAnimationAssetPtr>", Property::Type::T_container_map, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("std::string", Property::Type::T_container_string, Property::DecoratorType::D_normalized, {}), Property::TypeDescriptor("SpriteAnimationAssetPtr", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {})}), sizeof(std::map<std::string, SpriteAnimationAssetPtr>), origin + offsetof(SpriteAnimatorComponent, animations), {
    })));
    properties.insert(std::make_pair<std::string, Property>("autoplay", Property("autoplay", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(SpriteAnimatorComponent, autoplay), {
    })));
    return properties;
}
std::size_t SpriteAnimatorComponent::getTypeSize() const { return SpriteAnimatorComponentType::type().size; }

const TypeDefinition& SpriteAnimatorComponentType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new SpriteAnimatorComponent(); }, "SpriteAnimatorComponent", {
        std::make_pair("Category", "Component"),
    }, sizeof(SpriteAnimatorComponent));
    return s_typeDefinition;
}

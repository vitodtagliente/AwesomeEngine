// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "image_component.h"

const meta_t& ImageComponent::getTypeMeta() const { return ImageComponentType::type().meta; }
const std::string& ImageComponent::getTypeName() const { return ImageComponentType::type().name; }
const properties_t ImageComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("sprite", Property("sprite", Property::TypeDescriptor("SpriteAssetPtr", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(SpriteAssetPtr), origin + offsetof(ImageComponent, sprite), {
    })));
    properties.insert(std::make_pair<std::string, Property>("color", Property("color", Property::TypeDescriptor("graphics::Color", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(graphics::Color), origin + offsetof(ImageComponent, color), {
    })));
    return properties;
}
std::size_t ImageComponent::getTypeSize() const { return ImageComponentType::type().size; }

const TypeDefinition& ImageComponentType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new ImageComponent(); }, "ImageComponent", {
        std::make_pair("Category", "UI"),
        std::make_pair("Type", "Component"),
    }, sizeof(ImageComponent));
    return s_typeDefinition;
}

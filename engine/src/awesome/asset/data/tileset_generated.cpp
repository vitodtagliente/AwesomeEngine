// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "tileset.h"

const meta_t& Tile::getTypeMeta() const { return TileType::type().meta; }
const std::string& Tile::getTypeName() const { return TileType::type().name; }
const properties_t Tile::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("id", Property("id", Property::TypeDescriptor("uuid", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(uuid), origin + offsetof(Tile, id), {
    })));
    properties.insert(std::make_pair<std::string, Property>("rect", Property("rect", Property::TypeDescriptor("graphics::TextureRect", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(graphics::TextureRect), origin + offsetof(Tile, rect), {
    })));
    return properties;
}
std::size_t Tile::getTypeSize() const { return TileType::type().size; }

const TypeDefinition& TileType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new Tile(); }, "Tile", {
        std::make_pair("AssetType", "Tileset"),
        std::make_pair("Category", "Data"),
    }, sizeof(Tile));
    return s_typeDefinition;
}
const meta_t& Tileset::getTypeMeta() const { return TilesetType::type().meta; }
const std::string& Tileset::getTypeName() const { return TilesetType::type().name; }
const properties_t Tileset::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("tiles", Property("tiles", Property::TypeDescriptor("std::vector<std::unique_ptr<Tile>>", Property::Type::T_container_vector, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("Tile", Property::Type::T_custom_type, Property::DecoratorType::D_unique_ptr, {})}), sizeof(std::vector<std::unique_ptr<Tile>>), origin + offsetof(Tileset, tiles), {
    })));
    return properties;
}
std::size_t Tileset::getTypeSize() const { return TilesetType::type().size; }

const TypeDefinition& TilesetType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new Tileset(); }, "Tileset", {
        std::make_pair("Category", "Data"),
    }, sizeof(Tileset));
    return s_typeDefinition;
}

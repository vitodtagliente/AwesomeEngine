// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "tileset_data.h"

const meta_t& TileData::getTypeMeta() const { return __TileDataType::type().meta; }
const std::string& TileData::getTypeName() const { return __TileDataType::type().name; }
const properties_t TileData::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("index", Property("index", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(TileData, index), {
    })));
    properties.insert(std::make_pair<std::string, Property>("rect", Property("rect", Property::TypeDescriptor("graphics::TextureRect", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(graphics::TextureRect), origin + offsetof(TileData, rect), {
    })));
    properties.insert(std::make_pair<std::string, Property>("value", Property("value", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(TileData, value), {
    })));
    properties.insert(std::make_pair<std::string, Property>("hasCollider", Property("hasCollider", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(TileData, hasCollider), {
    })));
    return properties;
}
std::size_t TileData::getTypeSize() const { return __TileDataType::type().size; }
const meta_t& TileData::staticTypeMeta() { return __TileDataType::type().meta; }
const std::string& TileData::staticTypeName() { return __TileDataType::type().name; }

const TypeDefinition& __TileDataType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new TileData(); }, "TileData", {
        std::make_pair("Type", "Data"),
    }, sizeof(TileData));
    return s_typeDefinition;
}
const meta_t& TilesetData::getTypeMeta() const { return __TilesetDataType::type().meta; }
const std::string& TilesetData::getTypeName() const { return __TilesetDataType::type().name; }
const properties_t TilesetData::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("image", Property("image", Property::TypeDescriptor("ImageAssetPtr", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(ImageAssetPtr), origin + offsetof(TilesetData, image), {
    })));
    properties.insert(std::make_pair<std::string, Property>("tiles", Property("tiles", Property::TypeDescriptor("std::vector<std::unique_ptr<TileData>>", Property::Type::T_container_vector, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("TileData", Property::Type::T_custom_type, Property::DecoratorType::D_unique_ptr, {})}), sizeof(std::vector<std::unique_ptr<TileData>>), origin + offsetof(TilesetData, tiles), {
    })));
    properties.insert(std::make_pair<std::string, Property>("size", Property("size", Property::TypeDescriptor("math::vec2", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(math::vec2), origin + offsetof(TilesetData, size), {
    })));
    properties.insert(std::make_pair<std::string, Property>("tileSize", Property("tileSize", Property::TypeDescriptor("math::vec2", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(math::vec2), origin + offsetof(TilesetData, tileSize), {
    })));
    return properties;
}
std::size_t TilesetData::getTypeSize() const { return __TilesetDataType::type().size; }
const meta_t& TilesetData::staticTypeMeta() { return __TilesetDataType::type().meta; }
const std::string& TilesetData::staticTypeName() { return __TilesetDataType::type().name; }

const TypeDefinition& __TilesetDataType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new TilesetData(); }, "TilesetData", {
        std::make_pair("AssetType", "Tileset"),
        std::make_pair("Type", "Data"),
    }, sizeof(TilesetData));
    return s_typeDefinition;
}

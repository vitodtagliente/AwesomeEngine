// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "sprite_animation_data.h"

const meta_t& SpriteAnimationFrame::getTypeMeta() const { return __SpriteAnimationFrameType::type().meta; }
const std::string& SpriteAnimationFrame::getTypeName() const { return __SpriteAnimationFrameType::type().name; }
const properties_t SpriteAnimationFrame::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("rect", Property("rect", Property::TypeDescriptor("graphics::TextureRect", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(graphics::TextureRect), origin + offsetof(SpriteAnimationFrame, rect), {
    })));
    properties.insert(std::make_pair<std::string, Property>("duration", Property("duration", Property::TypeDescriptor("double", Property::Type::T_double, Property::DecoratorType::D_normalized, {}), sizeof(double), origin + offsetof(SpriteAnimationFrame, duration), {
    })));
    return properties;
}
std::size_t SpriteAnimationFrame::getTypeSize() const { return __SpriteAnimationFrameType::type().size; }
const meta_t& SpriteAnimationFrame::staticTypeMeta() { return __SpriteAnimationFrameType::type().meta; }
const std::string& SpriteAnimationFrame::staticTypeName() { return __SpriteAnimationFrameType::type().name; }

const TypeDefinition& __SpriteAnimationFrameType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new SpriteAnimationFrame(); }, "SpriteAnimationFrame", {
        std::make_pair("Type", "Data"),
    }, sizeof(SpriteAnimationFrame));
    return s_typeDefinition;
}
const meta_t& SpriteAnimationData::getTypeMeta() const { return __SpriteAnimationDataType::type().meta; }
const std::string& SpriteAnimationData::getTypeName() const { return __SpriteAnimationDataType::type().name; }
const properties_t SpriteAnimationData::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("image", Property("image", Property::TypeDescriptor("ImageAssetPtr", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(ImageAssetPtr), origin + offsetof(SpriteAnimationData, image), {
    })));
    properties.insert(std::make_pair<std::string, Property>("startingFrame", Property("startingFrame", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(SpriteAnimationData, startingFrame), {
    })));
    properties.insert(std::make_pair<std::string, Property>("frames", Property("frames", Property::TypeDescriptor("std::vector<std::unique_ptr<SpriteAnimationFrame>>", Property::Type::T_container_vector, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("SpriteAnimationFrame", Property::Type::T_custom_type, Property::DecoratorType::D_unique_ptr, {})}), sizeof(std::vector<std::unique_ptr<SpriteAnimationFrame>>), origin + offsetof(SpriteAnimationData, frames), {
    })));
    return properties;
}
std::size_t SpriteAnimationData::getTypeSize() const { return __SpriteAnimationDataType::type().size; }
const meta_t& SpriteAnimationData::staticTypeMeta() { return __SpriteAnimationDataType::type().meta; }
const std::string& SpriteAnimationData::staticTypeName() { return __SpriteAnimationDataType::type().name; }

const TypeDefinition& __SpriteAnimationDataType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new SpriteAnimationData(); }, "SpriteAnimationData", {
        std::make_pair("AssetType", "SpriteAnimation"),
        std::make_pair("Type", "Data"),
    }, sizeof(SpriteAnimationData));
    return s_typeDefinition;
}

// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "scene_data.h"

const meta_t& SceneSettingsData::getTypeMeta() const { return __SceneSettingsDataType::type().meta; }
const std::string& SceneSettingsData::getTypeName() const { return __SceneSettingsDataType::type().name; }
const properties_t SceneSettingsData::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("quandspacebounds", Property("quandspacebounds", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(SceneSettingsData, quandspacebounds), {
    })));
    return properties;
}
std::size_t SceneSettingsData::getTypeSize() const { return __SceneSettingsDataType::type().size; }
const meta_t& SceneSettingsData::staticTypeMeta() { return __SceneSettingsDataType::type().meta; }
const std::string& SceneSettingsData::staticTypeName() { return __SceneSettingsDataType::type().name; }

const TypeDefinition& __SceneSettingsDataType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new SceneSettingsData(); }, "SceneSettingsData", {
        std::make_pair("Type", "Data"),
    }, sizeof(SceneSettingsData));
    return s_typeDefinition;
}
const meta_t& SceneData::getTypeMeta() const { return __SceneDataType::type().meta; }
const std::string& SceneData::getTypeName() const { return __SceneDataType::type().name; }
const properties_t SceneData::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("entities", Property("entities", Property::TypeDescriptor("std::vector<json::value>", Property::Type::T_container_vector, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("json::value", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {})}), sizeof(std::vector<json::value>), origin + offsetof(SceneData, entities), {
    })));
    properties.insert(std::make_pair<std::string, Property>("note", Property("note", Property::TypeDescriptor("std::string", Property::Type::T_container_string, Property::DecoratorType::D_normalized, {}), sizeof(std::string), origin + offsetof(SceneData, note), {
    })));
    properties.insert(std::make_pair<std::string, Property>("settings", Property("settings", Property::TypeDescriptor("SceneSettingsData", Property::Type::T_custom_type, Property::DecoratorType::D_unique_ptr, {}), sizeof(std::unique_ptr<SceneSettingsData>), origin + offsetof(SceneData, settings), {
    })));
    return properties;
}
std::size_t SceneData::getTypeSize() const { return __SceneDataType::type().size; }
const meta_t& SceneData::staticTypeMeta() { return __SceneDataType::type().meta; }
const std::string& SceneData::staticTypeName() { return __SceneDataType::type().name; }

const TypeDefinition& __SceneDataType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new SceneData(); }, "SceneData", {
        std::make_pair("AssetType", "Scene"),
        std::make_pair("Type", "Data"),
    }, sizeof(SceneData));
    return s_typeDefinition;
}

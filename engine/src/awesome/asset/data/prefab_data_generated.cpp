// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "prefab_data.h"

const meta_t& PrefabData::getTypeMeta() const { return __PrefabDataType::type().meta; }
const std::string& PrefabData::getTypeName() const { return __PrefabDataType::type().name; }
const properties_t PrefabData::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("entity", Property("entity", Property::TypeDescriptor("json::value", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(json::value), origin + offsetof(PrefabData, entity), {
    })));
    properties.insert(std::make_pair<std::string, Property>("note", Property("note", Property::TypeDescriptor("std::string", Property::Type::T_container_string, Property::DecoratorType::D_normalized, {}), sizeof(std::string), origin + offsetof(PrefabData, note), {
    })));
    return properties;
}
std::size_t PrefabData::getTypeSize() const { return __PrefabDataType::type().size; }
const meta_t& PrefabData::staticTypeMeta() { return __PrefabDataType::type().meta; }
const std::string& PrefabData::staticTypeName() { return __PrefabDataType::type().name; }

const TypeDefinition& __PrefabDataType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new PrefabData(); }, "PrefabData", {
        std::make_pair("AssetType", "Prefab"),
        std::make_pair("Type", "Data"),
    }, sizeof(PrefabData));
    return s_typeDefinition;
}

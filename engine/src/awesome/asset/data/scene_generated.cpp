// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "scene.h"
#pragma warning(disable: 4100)

IType* const reflect::Type<Scene>::instantiate()
{
    return dynamic_cast<IType*>(new Scene());
}

const reflect::meta_t& reflect::Type<Scene>::meta()
{
    static reflect::meta_t s_meta {
    };
    return s_meta;
}
const char* const reflect::Type<Scene>::name() { return "Scene"; }

const reflect::properties_t& Type<Scene>::properties()
{
    static reflect::properties_t s_properties {
        { "entities", reflect::Property{ offsetof(Scene, entities), reflect::meta_t { }, "entities", reflect::PropertyType{ "std::vector<Entity>", { 
            reflect::PropertyType{ "Entity", {  }, reflect::PropertyType::DecoratorType::D_raw, sizeof(Entity), reflect::PropertyType::Type::T_type },
        }, reflect::PropertyType::DecoratorType::D_raw, sizeof(std::vector<Entity>), reflect::PropertyType::Type::T_template } } },
    };
    return s_properties;
}

std::size_t reflect::Type<Scene>::size()
{
    return sizeof(Scene);
}

void reflect::Type<Scene>::from_string(const std::string& str, Scene& type)
{
    reflect::encoding::ByteBuffer buffer;
    std::transform(
        std::begin(str),
        std::end(str),
        std::back_inserter(buffer),
        [](const char c)
        {
            return std::byte(c);
        }
    );
    
    reflect::encoding::InputByteStream stream(buffer);
    std::string _name;
    stream >> _name;
    if (_name != name()) return;
    
    {
        type.entities.clear();
        std::size_t size;
        stream >> size;
        for (int i = 0; i < size; ++i)
        {
            Entity element;
            {
                std::string pack;
                stream >> pack;
                element.from_string(pack);
            }
            type.entities.push_back(std::move(element));
        }
    }
}

std::string reflect::Type<Scene>::to_string(const Scene& type)
{
    reflect::encoding::ByteBuffer buffer;
    reflect::encoding::OutputByteStream stream(buffer);
    stream << name();
    
    {
        stream << type.entities.size();
        for (const auto& element : type.entities)
        {
            stream << static_cast<std::string>(element);
        }
    }
    
    return std::string(reinterpret_cast<const char*>(&stream.getBuffer()[0]), stream.getBuffer().size());
}

void reflect::Type<Scene>::from_json(const std::string& json, Scene& type)
{
    std::string src{ reflect::encoding::json::Deserializer::trim(json, reflect::encoding::json::Deserializer::space) };
    
    size_t index = 0;
    std::string key;
    while ((index = reflect::encoding::json::Deserializer::next_key(src, key)) != std::string::npos)
    {
        src = src.substr(index + 2);
        src = reflect::encoding::json::Deserializer::ltrim(src, reflect::encoding::json::Deserializer::space);
        std::string value;
        index = reflect::encoding::json::Deserializer::next_value(src, value);
        if (index != std::string::npos)
        {
            if (key == "entities") reflect::encoding::json::Deserializer::parse(value, type.entities);
            src = src.substr(index + 1);
        }
        else break;
    };
}

std::string reflect::Type<Scene>::to_json(const Scene& type, const std::string& offset)
{
    std::stringstream stream;
    stream << "{" << std::endl;
    stream << offset << "    " << "\"type_id\": " << "\"Scene\"" << "," << std::endl;
    stream << offset << "    " << "\"entities\": " << reflect::encoding::json::Serializer::to_string(type.entities) << "," << std::endl;
    stream << offset << "}";
    return stream.str();
}

const reflect::meta_t& Scene::type_meta() const { return reflect::Type<Scene>::meta(); }
const char* const Scene::type_name() const { return reflect::Type<Scene>::name(); }
const reflect::properties_t& Scene::type_properties() const { return reflect::Type<Scene>::properties(); }
Scene::operator std::string() const { return reflect::Type<Scene>::to_string(*this); }
void Scene::from_string(const std::string& str)
{
    reflect::Type<Scene>::from_string(str, *this);
    type_initialize();
}
void Scene::from_json(const std::string& json)
{
    reflect::Type<Scene>::from_json(json, *this);
    type_initialize();
}
std::string Scene::to_json(const std::string& offset) const { return reflect::Type<Scene>::to_json(*this, offset); }
// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtproto/runtime.h>

enum class AssetType : int
{
    None = 0,
    Image = 1,
    Prefab = 2,
    Scene = 3,
    Sprite = 4,
    SpriteAnimation = 5,
    Text = 6,
};

template <>
struct EnumType<AssetType>
{
    static const char* name() { return "AssetType"; }
    static const std::map<const char*, int> values()
    {
        static std::map<const char*, int> s_values {
            { "None", static_cast<int>(AssetType::None) },
            { "Image", static_cast<int>(AssetType::Image) },
            { "Prefab", static_cast<int>(AssetType::Prefab) },
            { "Scene", static_cast<int>(AssetType::Scene) },
            { "Sprite", static_cast<int>(AssetType::Sprite) },
            { "SpriteAnimation", static_cast<int>(AssetType::SpriteAnimation) },
            { "Text", static_cast<int>(AssetType::Text) },
        };
        return s_values;
    }
};


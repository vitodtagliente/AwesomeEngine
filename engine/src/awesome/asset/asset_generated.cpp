// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "asset.h"

const meta_t& Asset::getTypeMeta() const { return __AssetType::type().meta; }
const std::string& Asset::getTypeName() const { return __AssetType::type().name; }
const properties_t Asset::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties;
    properties.insert(std::make_pair<std::string, Property>("id", Property("id", Property::TypeDescriptor("uuid", Property::Type::T_unknown, Property::DecoratorType::D_normalized, {}), sizeof(uuid), origin + offsetof(Asset, id), {
    })));
    return properties;
}
std::size_t Asset::getTypeSize() const { return __AssetType::type().size; }

const TypeDefinition& __AssetType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new Asset(); }, "Asset", {
    }, sizeof(Asset));
    return s_typeDefinition;
}

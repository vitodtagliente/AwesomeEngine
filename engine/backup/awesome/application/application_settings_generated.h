// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtreflect/runtime.h>

template <>
struct EnumType<enum class ApplicationMode>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct __ApplicationModeEnum : RegisteredInEnumFactory<enum class ApplicationMode>
{
    static bool registered() { return value; };
};

template <>
struct EnumType<enum class FpsMode>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct __FpsModeEnum : RegisteredInEnumFactory<enum class FpsMode>
{
    static bool registered() { return value; };
};

struct __ApplicationEditorSettingsType : RegisteredInTypeFactory<__ApplicationEditorSettingsType>
{
    __ApplicationEditorSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct __ApplicationDebugSettingsType : RegisteredInTypeFactory<__ApplicationDebugSettingsType>
{
    __ApplicationDebugSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct __ApplicationNetworkSettingsType : RegisteredInTypeFactory<__ApplicationNetworkSettingsType>
{
    __ApplicationNetworkSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct __ApplicationPlayerSettingsType : RegisteredInTypeFactory<__ApplicationPlayerSettingsType>
{
    __ApplicationPlayerSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct __ApplicationSceneSettingsType : RegisteredInTypeFactory<__ApplicationSceneSettingsType>
{
    __ApplicationSceneSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct __ApplicationSettingsType : RegisteredInTypeFactory<__ApplicationSettingsType>
{
    __ApplicationSettingsType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};


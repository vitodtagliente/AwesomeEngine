// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "game_player_state.h"

const meta_t& GamePlayerState::getTypeMeta() const { return __GamePlayerStateType::type().meta; }
const std::string& GamePlayerState::getTypeName() const { return __GamePlayerStateType::type().name; }
const properties_t GamePlayerState::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = PlayerState::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("m_xp", Property("m_xp", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(GamePlayerState, m_xp), {
    })));
    return properties;
}
std::size_t GamePlayerState::getTypeSize() const { return __GamePlayerStateType::type().size; }

const TypeDefinition& __GamePlayerStateType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new GamePlayerState(); }, "GamePlayerState", {
        std::make_pair("Type", "PlayerState"),
    }, sizeof(GamePlayerState));
    return s_typeDefinition;
}

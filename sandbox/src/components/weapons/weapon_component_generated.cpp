// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "weapon_component.h"

const meta_t& WeaponComponent::getTypeMeta() const { return WeaponComponentType::type().meta; }
const std::string& WeaponComponent::getTypeName() const { return WeaponComponentType::type().name; }
const properties_t WeaponComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("duration", Property("duration", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(WeaponComponent, duration), {
    })));
    properties.insert(std::make_pair<std::string, Property>("efficacy", Property("efficacy", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(WeaponComponent, efficacy), {
    })));
    properties.insert(std::make_pair<std::string, Property>("frequency", Property("frequency", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(WeaponComponent, frequency), {
    })));
    properties.insert(std::make_pair<std::string, Property>("quantity", Property("quantity", Property::TypeDescriptor("int", Property::Type::T_int, Property::DecoratorType::D_normalized, {}), sizeof(int), origin + offsetof(WeaponComponent, quantity), {
    })));
    properties.insert(std::make_pair<std::string, Property>("range", Property("range", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(WeaponComponent, range), {
    })));
    properties.insert(std::make_pair<std::string, Property>("speed", Property("speed", Property::TypeDescriptor("float", Property::Type::T_float, Property::DecoratorType::D_normalized, {}), sizeof(float), origin + offsetof(WeaponComponent, speed), {
    })));
    return properties;
}
std::size_t WeaponComponent::getTypeSize() const { return WeaponComponentType::type().size; }

const TypeDefinition& WeaponComponentType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new WeaponComponent(); }, "WeaponComponent", {
    }, sizeof(WeaponComponent));
    return s_typeDefinition;
}

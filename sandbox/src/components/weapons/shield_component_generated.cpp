// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "shield_component.h"

const meta_t& ShiedComponent::getTypeMeta() const { return ShiedComponentType::type().meta; }
const std::string& ShiedComponent::getTypeName() const { return ShiedComponentType::type().name; }
const properties_t ShiedComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = WeaponComponent::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("power", Property("power", PropertyType::T_int, "int", true, sizeof(int), origin + offsetof(ShiedComponent, power), {
    })));
    properties.insert(std::make_pair<std::string, Property>("frequency", Property("frequency", PropertyType::T_double, "double", true, sizeof(double), origin + offsetof(ShiedComponent, frequency), {
    })));
    properties.insert(std::make_pair<std::string, Property>("range", Property("range", PropertyType::T_float, "float", true, sizeof(float), origin + offsetof(ShiedComponent, range), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_color", Property("m_color", PropertyType::T_unknown, "graphics::Color", true, sizeof(graphics::Color), origin + offsetof(ShiedComponent, m_color), {
    })));
    return properties;
}
std::size_t ShiedComponent::getTypeSize() const { return ShiedComponentType::type().size; }

const Type& ShiedComponentType::type()
{
    static const Type s_type([]() -> IType* { return new ShiedComponent(); }, "ShiedComponent", {
        std::make_pair("Category", "Component"),
    }, sizeof(ShiedComponent));
    return s_type;
}

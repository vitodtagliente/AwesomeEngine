// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "rotator_component.h"

const meta_t& RotatorComponent::getTypeMeta() const { return RotatorComponentType::type().meta; }
const std::string& RotatorComponent::getTypeName() const { return RotatorComponentType::type().name; }
const properties_t RotatorComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("speed", Property("speed", NativeType::NT_int, "int", sizeof(int), origin + offsetof(RotatorComponent, speed), {
    })));
    return properties;
}
std::size_t RotatorComponent::getTypeSize() const { return RotatorComponentType::type().size; }

const Type& RotatorComponentType::type()
{
    static const Type s_type([]() -> IType* { return new RotatorComponent(); }, "RotatorComponent", {
    }, sizeof(RotatorComponent));
    return s_type;
}

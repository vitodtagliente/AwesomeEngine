// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "rotator_component.h"

const meta_t& RotatorComponent::getTypeMeta() const { return RotatorComponentType::meta(); }
const char* RotatorComponent::getTypeName() const { return RotatorComponentType::name(); }
const properties_t RotatorComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("speed", Property("speed", NativeType::NT_int, "int", sizeof(int), origin + offsetof(RotatorComponent, speed), {
    })));
    return properties;
}
std::size_t RotatorComponent::getTypeSize() const { return sizeof(RotatorComponent); }

RotatorComponentType::RotatorComponentType()
{
    TypeFactoryRegister::load(RotatorComponentType::name(), []() -> const meta_t& { return RotatorComponentType::meta(); }, []() -> IType* { return RotatorComponentType::instantiate(); });
}

RotatorComponent* const RotatorComponentType::instantiate()
{
    return new RotatorComponent();
}

const meta_t& RotatorComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* RotatorComponentType::name() { return "RotatorComponent"; }

RotatorComponentType __rotatorcomponent_type;


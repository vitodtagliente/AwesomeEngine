// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "pawn_component.h"

const meta_t& PawnComponent::getTypeMeta() const { return PawnComponentType::meta(); }
const char* PawnComponent::getTypeName() const { return PawnComponentType::name(); }
const properties_t PawnComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    return properties;
}
std::size_t PawnComponent::getTypeSize() const { return sizeof(PawnComponent); }

PawnComponentType::PawnComponentType()
{
    TypeFactoryRegister::load(PawnComponentType::name(), []() -> const meta_t& { return PawnComponentType::meta(); }, []() -> IType* { return PawnComponentType::instantiate(); });
}

PawnComponent* const PawnComponentType::instantiate()
{
    return new PawnComponent();
}

const meta_t& PawnComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* PawnComponentType::name() { return "PawnComponent"; }

PawnComponentType __pawncomponent_type;


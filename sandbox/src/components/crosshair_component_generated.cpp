// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "crosshair_component.h"

const meta_t& CrosshairComponent::getTypeMeta() const { return CrosshairComponentType::meta(); }
const char* CrosshairComponent::getTypeName() const { return CrosshairComponentType::name(); }
const properties_t CrosshairComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    return properties;
}
std::size_t CrosshairComponent::getTypeSize() const { return sizeof(CrosshairComponent); }

CrosshairComponentType::CrosshairComponentType()
{
    TypeFactoryRegister::load(CrosshairComponentType::name(), []() -> const meta_t& { return CrosshairComponentType::meta(); }, []() -> IType* { return CrosshairComponentType::instantiate(); });
}

CrosshairComponent* const CrosshairComponentType::instantiate()
{
    return new CrosshairComponent();
}

const meta_t& CrosshairComponentType::meta()
{
    static meta_t s_meta{
    };
    return s_meta;
}

const char* CrosshairComponentType::name() { return "CrosshairComponent"; }

CrosshairComponentType __crosshaircomponent_type;


// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtreflect/runtime.h>

template <>
struct EnumType<enum class ItemCategory>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct ItemCategoryEnum : RegisteredInEnumFactory<enum class ItemCategory>
{
    static bool registered() { return value; };
};

template <>
struct EnumType<enum class EquipmentPositionType>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct EquipmentPositionTypeEnum : RegisteredInEnumFactory<enum class EquipmentPositionType>
{
    static bool registered() { return value; };
};

template <>
struct EnumType<enum class ConsumableEffectType>
{
    static const char* name();
    static const  enum_values_t& values();
};

struct ConsumableEffectTypeEnum : RegisteredInEnumFactory<enum class ConsumableEffectType>
{
    static bool registered() { return value; };
};

struct ConsumableItemDataType : RegisteredInTypeFactory<ConsumableItemDataType>
{
    ConsumableItemDataType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct EquipmentItemDataType : RegisteredInTypeFactory<EquipmentItemDataType>
{
    EquipmentItemDataType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};

struct ItemType : RegisteredInTypeFactory<ItemType>
{
    ItemType() = delete;

    static const TypeDefinition& type();
    static bool registered() { return value; };
};


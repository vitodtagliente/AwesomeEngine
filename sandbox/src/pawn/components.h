// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#pragma once

#include <vdtproto/runtime.h>

#include "bullet.h"
#include "camera_follow_2d.h"
#include "combat_controller.h"
#include "crosshair.h"
#include "health.h"
#include "lifetime.h"
#include "pawn.h"
#include "pawn_controller.h"
#include "rotator.h"

class BulletType
{
public:
    BulletType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Bullet* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class CameraFollow2dType
{
public:
    CameraFollow2dType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const CameraFollow2d* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class CombatControllerType
{
public:
    CombatControllerType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const CombatController* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class CrosshairType
{
public:
    CrosshairType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Crosshair* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class HealthType
{
public:
    HealthType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Health* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class LifetimeType
{
public:
    LifetimeType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Lifetime* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class PawnType
{
public:
    PawnType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Pawn* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class PawnControllerType
{
public:
    PawnControllerType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const PawnController* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};

class RotatorType
{
public:
    RotatorType() = delete;

    static const TypeDescriptor& descriptor();
    static fields_t fields(const Rotator* const pointer);

private:
    static TypeDescriptor s_typeDescriptor;
    static void registerTypeDescriptor(TypeDescriptor*);
};


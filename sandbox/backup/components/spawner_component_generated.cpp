// Copyright (c) Vito Domenico Tagliente
// automatically generated by the compiler, do not modify
#include "spawner_component.h"

const meta_t& SpawnerComponent::getTypeMeta() const { return __SpawnerComponentType::type().meta; }
const std::string& SpawnerComponent::getTypeName() const { return __SpawnerComponentType::type().name; }
const properties_t SpawnerComponent::getTypeProperties() const {
    member_address_t origin = reinterpret_cast<member_address_t>(this);
    properties_t properties = Component::getTypeProperties();
    properties.insert(std::make_pair<std::string, Property>("m_autostart", Property("m_autostart", Property::TypeDescriptor("bool", Property::Type::T_bool, Property::DecoratorType::D_normalized, {}), sizeof(bool), origin + offsetof(SpawnerComponent, m_autostart), {
    })));
    properties.insert(std::make_pair<std::string, Property>("m_waves", Property("m_waves", Property::TypeDescriptor("std::vector<std::unique_ptr<Wave>>", Property::Type::T_container_vector, Property::DecoratorType::D_normalized, {Property::TypeDescriptor("Wave", Property::Type::T_custom_type, Property::DecoratorType::D_unique_ptr, {})}), sizeof(std::vector<std::unique_ptr<Wave>>), origin + offsetof(SpawnerComponent, m_waves), {
    })));
    return properties;
}
std::size_t SpawnerComponent::getTypeSize() const { return __SpawnerComponentType::type().size; }
const meta_t& SpawnerComponent::staticTypeMeta() { return __SpawnerComponentType::type().meta; }
const std::string& SpawnerComponent::staticTypeName() { return __SpawnerComponentType::type().name; }

const TypeDefinition& __SpawnerComponentType::type()
{
    static const TypeDefinition s_typeDefinition([]() -> Type* { return new SpawnerComponent(); }, "SpawnerComponent", {
        std::make_pair("Type", "Component"),
    }, sizeof(SpawnerComponent));
    return s_typeDefinition;
}
